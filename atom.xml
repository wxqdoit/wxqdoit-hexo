<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hey, wxqdoit</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wxqdoit.com/"/>
  <updated>2020-02-08T09:36:09.068Z</updated>
  <id>https://www.wxqdoit.com/</id>
  
  <author>
    <name>wxqdoit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年终总结</title>
    <link href="https://www.wxqdoit.com/20200208/2019/"/>
    <id>https://www.wxqdoit.com/20200208/2019/</id>
    <published>2020-02-08T09:32:28.000Z</published>
    <updated>2020-02-08T09:36:09.068Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a><strong>搬家</strong></h3><p>2019-11 对，我又搬家了</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a><strong>工作</strong></h3><p>2019-06 对 我又换工作了</p><h3 id="刷剧"><a href="#刷剧" class="headerlink" title="刷剧"></a><strong>刷剧</strong></h3><p>《我和僵尸有个约会1》</p><p>《我和僵尸有个约会3》</p><p>《非自然死亡》</p><p>《带着爸爸去留学》</p><p>《惊蛰》</p><h3 id="电影、纪录片"><a href="#电影、纪录片" class="headerlink" title="电影、纪录片"></a><strong>电影、纪录片</strong></h3><p>《哪吒之魔童降世》（电影院）</p><p>《流浪地球》</p><p>《中国机长》</p><p>《飞驰人生》</p><p>《攀登者》</p><p>《银河补习班》</p><p>《白蛇：缘起》</p><p>《老师·好》</p><p>《大人物》</p><p>《人生果实》</p><p>《了不起的盖茨比》</p><p>《星际穿越》</p><p>《闪光少女》</p><p>《百鸟朝凤》</p><p>《妈阁是座城》</p><p>《第一滴血1-3》</p><p>《楚门的世界》</p><p>《道士下山》</p><p>《我的喜马拉雅》</p><p>《一条狗的使命》</p><p>《我是山姆》</p><p>《恋爱回旋》</p><a id="more"></a><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a><strong>读书</strong></h3><p>《我是猫》</p><p>《了不起的盖茨比》</p><p>《白夜行》</p><p>《时间简史》</p><h3 id="追番"><a href="#追番" class="headerlink" title="追番"></a><strong>追番</strong></h3><p>《鬼灭之刃》</p><p>《重来吧！魔王大人》</p><p>《这个勇者明明超强却过分慎重》</p><p>《流汗吧！健身少女》</p><p>《罗小黑战记》</p><p>《我们仍未知道那天所看见的花的名字》</p><p>《博人传》</p><h3 id="活动、旅行、出差"><a href="#活动、旅行、出差" class="headerlink" title="活动、旅行、出差"></a><strong>活动、旅行、出差</strong></h3><p>2019-02 自贡</p><p>2019-04 西安</p><p>2019-05 色达</p><p>2019-05 贵阳数博会</p><p>2019-07 上海IPFS会议</p><p>2019-12 成都BW</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;搬家&quot;&gt;&lt;a href=&quot;#搬家&quot; class=&quot;headerlink&quot; title=&quot;搬家&quot;&gt;&lt;/a&gt;&lt;strong&gt;搬家&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;2019-11 对，我又搬家了&lt;/p&gt;
&lt;h3 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;&lt;strong&gt;工作&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;2019-06 对 我又换工作了&lt;/p&gt;
&lt;h3 id=&quot;刷剧&quot;&gt;&lt;a href=&quot;#刷剧&quot; class=&quot;headerlink&quot; title=&quot;刷剧&quot;&gt;&lt;/a&gt;&lt;strong&gt;刷剧&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;《我和僵尸有个约会1》&lt;/p&gt;
&lt;p&gt;《我和僵尸有个约会3》&lt;/p&gt;
&lt;p&gt;《非自然死亡》&lt;/p&gt;
&lt;p&gt;《带着爸爸去留学》&lt;/p&gt;
&lt;p&gt;《惊蛰》&lt;/p&gt;
&lt;h3 id=&quot;电影、纪录片&quot;&gt;&lt;a href=&quot;#电影、纪录片&quot; class=&quot;headerlink&quot; title=&quot;电影、纪录片&quot;&gt;&lt;/a&gt;&lt;strong&gt;电影、纪录片&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;《哪吒之魔童降世》（电影院）&lt;/p&gt;
&lt;p&gt;《流浪地球》&lt;/p&gt;
&lt;p&gt;《中国机长》&lt;/p&gt;
&lt;p&gt;《飞驰人生》&lt;/p&gt;
&lt;p&gt;《攀登者》&lt;/p&gt;
&lt;p&gt;《银河补习班》&lt;/p&gt;
&lt;p&gt;《白蛇：缘起》&lt;/p&gt;
&lt;p&gt;《老师·好》&lt;/p&gt;
&lt;p&gt;《大人物》&lt;/p&gt;
&lt;p&gt;《人生果实》&lt;/p&gt;
&lt;p&gt;《了不起的盖茨比》&lt;/p&gt;
&lt;p&gt;《星际穿越》&lt;/p&gt;
&lt;p&gt;《闪光少女》&lt;/p&gt;
&lt;p&gt;《百鸟朝凤》&lt;/p&gt;
&lt;p&gt;《妈阁是座城》&lt;/p&gt;
&lt;p&gt;《第一滴血1-3》&lt;/p&gt;
&lt;p&gt;《楚门的世界》&lt;/p&gt;
&lt;p&gt;《道士下山》&lt;/p&gt;
&lt;p&gt;《我的喜马拉雅》&lt;/p&gt;
&lt;p&gt;《一条狗的使命》&lt;/p&gt;
&lt;p&gt;《我是山姆》&lt;/p&gt;
&lt;p&gt;《恋爱回旋》&lt;/p&gt;
    
    </summary>
    
      <category term="记事簿" scheme="https://www.wxqdoit.com/categories/%E8%AE%B0%E4%BA%8B%E7%B0%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>浅探NPM</title>
    <link href="https://www.wxqdoit.com/20190226/npm/"/>
    <id>https://www.wxqdoit.com/20190226/npm/</id>
    <published>2019-02-26T02:48:53.000Z</published>
    <updated>2019-03-05T15:42:28.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="今晩はお月さん"><a href="#今晩はお月さん" class="headerlink" title="今晩はお月さん"></a><strong>今晩はお月さん</strong></h3>        <div id="aplayer-qnDVJJRT" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-qnDVJJRT"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "今晩はお月さん",              author: "ハンバート",              url: "https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/705a_b88c_b84e_ced8f9e08c9e6c9970ee894a66361a6a.mp3",              pic: "https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/703687441788470.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>先放松一心情，听一首有趣的歌！</p><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/20180624161012_Btt8i.jpeg" alt=""></p><a id="more"></a><h3 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a><strong>包管理器</strong></h3><p>如果使用过<code>Gradle</code>，一定对下面的配置很容易理解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//用于构建项目的插件</span><br><span class="line">apply plugin: &apos;java&apos;</span><br><span class="line">apply plugin: &apos;spring-boot&apos;</span><br><span class="line">apply plugin: &apos;idea&apos;</span><br><span class="line">apply plugin: &apos;war&apos;</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123; url &quot;https://repo.spring.io/plugins-release&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //指定gradle插件的版本</span><br><span class="line">    dependencies &#123;</span><br><span class="line">    classpath(&apos;io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE&apos;)</span><br><span class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//构建脚本中所依赖库在jcenter仓库下载</span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//指定当前项目的依赖</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(&quot;org.springframework.boot:spring-boot-starter&quot;)</span><br><span class="line">    compile(&quot;org.springframework.boot:spring-boot-starter-web&quot;)</span><br><span class="line">    compile(&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;)</span><br><span class="line">    compile(&apos;mysql:mysql-connector-java:5.1.38&apos;)</span><br><span class="line">    compile(&apos;commons-fileupload:commons-fileupload:1.3.1&apos;)</span><br><span class="line">    compile(&apos;com.alibaba:fastjson:1.2.7&apos;)</span><br><span class="line">    compile(&quot;org.springframework.boot:spring-boot-starter-velocity&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    sourceCompatibility = &apos;1.8&apos;</span><br><span class="line">    targetCompatibility = &apos;1.8&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果使用过<code>Maven</code>，一定对下面的配置很容易理解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;FruitShop&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;FruitShop&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;FruitShop Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;shiro.version&gt;1.2.5&lt;/shiro.version&gt;</span><br><span class="line">        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- Logging API + implementation: --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.21&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--mybatis的包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接的包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.38&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;FruitShop&lt;/finalName&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">          &lt;plugin&gt;</span><br><span class="line">              &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                  &lt;source&gt;1.6&lt;/source&gt;</span><br><span class="line">                  &lt;target&gt;1.6&lt;/target&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">          &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line">      &lt;!--idea能够编译非resources中的xml文件--&gt;</span><br><span class="line">      &lt;resources&gt;</span><br><span class="line">          &lt;resource&gt;</span><br><span class="line">              &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">              &lt;includes&gt;</span><br><span class="line">                  &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">              &lt;/includes&gt;</span><br><span class="line">          &lt;/resource&gt;</span><br><span class="line">      &lt;/resources&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>Gradle和Maven都是Java Web项目的构建工具，当然还有Ant，Gradle还作为Android项目的官方构建工具。</p><p>所以如果熟悉Gradle和Maven，那么对NPM就非常容易理解。</p><h3 id="NPM前世今生"><a href="#NPM前世今生" class="headerlink" title="NPM前世今生"></a><strong>NPM前世今生</strong></h3><p>NPM（Node Package Manager）</p><ul><li>作为NodeJs的包管理器，伴随着Node的诞生而诞生，内置于Node中，当安装好Node之后，NPM也就对应安装好了。<br>但是具体在哪个版本中内置的我没有找到（请大佬告诉我）。下面是NPM的最初版本：</li></ul><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/drs.png" alt=""></p><p>Yarn与CNPM</p><ul><li><p>Yarn可以理解为NPM的远房表亲，同样是包管理器（但我就是不用你）。</p></li><li><p>CNPM是淘宝对NPM做的国内镜像，主要为了解决国内开发者使用NPM下载依赖中超时等问题。但是使用CNPM下载安装各种依赖包时有可能会出现莫名其妙的错误。</p></li></ul><h3 id="NPM项目"><a href="#NPM项目" class="headerlink" title="NPM项目"></a><strong>NPM项目</strong></h3><blockquote><p>初始化项目，命令行输入：<code>npm init</code>，然后一顿回车</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">D:\dev&gt;cd npm-test</span><br><span class="line"></span><br><span class="line">D:\dev\npm-test&gt;npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (npm-test)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test command:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to D:\dev\npm-test\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;npm-test&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Is this ok? (yes)</span><br><span class="line"></span><br><span class="line">D:\dev\npm-test&gt;</span><br></pre></td></tr></table></figure><blockquote><p>此时已经初始化好了项目，并自动生成了package.json文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;name&quot;: &quot;npm-test&quot;,    //项目名</span><br><span class="line">     &quot;version&quot;: &quot;1.0.0&quot;,    //版本号</span><br><span class="line">     &quot;description&quot;: &quot;&quot;,     //项目描述</span><br><span class="line">     &quot;main&quot;: &quot;index.js&quot;,    //入口文件</span><br><span class="line">     &quot;scripts&quot;: &#123;           //定义脚本命令</span><br><span class="line">       &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;author&quot;: &quot;&quot;,          //作者</span><br><span class="line">     &quot;license&quot;: &quot;ISC&quot;       //开放源代码许可证 ISC</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>scripts</code>的配置里面有一个test字段，当我们在命令行输入<code>npm run test</code>会输出<code>echo &quot;Error: no test specified&quot; &amp;&amp; exit 1</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\npm-test&gt;npm run test</span><br><span class="line"></span><br><span class="line">&gt; npm-test@1.0.0 test D:\dev\npm-test</span><br><span class="line">&gt; echo &quot;Error: no test specified&quot; &amp;&amp; exit 1</span><br><span class="line"></span><br><span class="line">&quot;Error: no test specified&quot;</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! npm-test@1.0.0 test: `echo &quot;Error: no test specified&quot; &amp;&amp; exit 1`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the npm-test@1.0.0 test script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">npm WARN Local package.json exists, but node_modules missing, did you mean to install?</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     C:\Users\wxqdoit\AppData\Roaming\npm-cache\_logs\2019-02-26T06_46_24_718Z-debug.log</span><br><span class="line"></span><br><span class="line">D:\dev\npm-test&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 将<code>scripts</code>下改成:<code>&quot;build&quot;: &quot;node index.js&quot;</code>，再在项目目录下新建index.js，并编写如下代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function closure()&#123;</span><br><span class="line">    var a = 1;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        console.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//内部函数引用外部函数的变量,并返回自身，なに、大名鼎鼎的闭包？</span><br><span class="line">closure()()</span><br></pre></td></tr></table></figure><blockquote><p> 在命令行输入<code>npm run build</code>，记住是npm run +自定义命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\npm-test&gt;npm run build</span><br><span class="line"></span><br><span class="line">&gt; npm-test@1.0.0 build D:\dev\npm-test</span><br><span class="line">&gt; node index.js</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">D:\dev\npm-test&gt;</span><br></pre></td></tr></table></figure><font color="orange">姿势摆好，准备进入正题了</font><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/15242783866787428.jpg" alt=""></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a><strong>安装依赖</strong></h3><ul><li>安装express：<font color="orange"><code>npm install express</code></font></li></ul><blockquote><p> 很快就安装好了，打开package.json文件发现里面多了如下依赖,同时也自动生成了node_modules文件夹。<br>很多资料说<code>npm install xxx</code>只是安装到node_modules目录中不会添加package.json到中，<br>而 <code>npm install xxx --save</code>会添加到package.json中，但是我每次执行<code>npm install xxx</code>都修改了package.json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;express&quot;: &quot;^4.16.4&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面我们执行<code>npm install express --save-dev</code>，安装完成后查看package.json，<br>发现将express转移到了devDependencies里面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;express&quot;: &quot;^4.16.4&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以总结如下</p></blockquote><ul><li><code>npm install xxx</code> 在我的环境下等同于<code>npm install xxx --save</code>会安装到dependencies里面</li><li><code>npm install xxx --save</code>     项目实际上线后需要依赖的包请使用这条命令安装</li><li><p><code>npm install xxx --save-dev</code> 项目实际上线后【不】需要依赖的包请使用这条命令安装</p></li><li><p>dependencies代表生成环境</p></li><li>devDependencies代表开发环境</li></ul><blockquote><p> 现在将express转到dependencies里面：<code>npm install express --save</code></p></blockquote><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/20180210022132_ckkln.jpeg" alt=""></p><blockquote><p> 试了几次之后发现<code>npm install express --save</code>根本没有起作用，<br>所以我<code>npm uninstall express</code>再<code>npm install express --save</code></p></blockquote><h3 id="NPM模块安装机制"><a href="#NPM模块安装机制" class="headerlink" title="NPM模块安装机制"></a><strong>NPM模块安装机制</strong></h3><ul><li>发出<code>npm install</code>命令</li><li>检测package.json依赖</li><li>查询node_modules目录之中是否已经存在指定模块<ul><li>若存在，不再重新安装</li><li>若不存在<ul><li>npm 向 registry 查询模块压缩包的网址</li><li>下载压缩包，存放在根目录下的<code>.npm</code>目录里</li><li>解压压缩包到当前项目的<code>node_modules</code>目录</li></ul></li></ul></li></ul><blockquote><p>NPM有哪些命令呢，命令行输入<code>npm</code>，简写命令在<code>Node安装目录\node_modules\npm\lib\config\cmd-list.js</code>可以看到</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\npm-test&gt;npm</span><br><span class="line"></span><br><span class="line">Usage: npm &lt;command&gt;</span><br><span class="line"></span><br><span class="line">where &lt;command&gt; is one of:</span><br><span class="line">    access, adduser, bin, bugs, c, cache, completion, config,</span><br><span class="line">    ddp, dedupe, deprecate, dist-tag, docs, doctor, edit,</span><br><span class="line">    explore, get, help, help-search, i, init, install,</span><br><span class="line">    install-test, it, link, list, ln, login, logout, ls,</span><br><span class="line">    outdated, owner, pack, ping, prefix, profile, prune,</span><br><span class="line">    publish, rb, rebuild, repo, restart, root, run, run-script,</span><br><span class="line">    s, se, search, set, shrinkwrap, star, stars, start, stop, t,</span><br><span class="line">    team, test, token, tst, un, uninstall, unpublish, unstar,</span><br><span class="line">    up, update, v, version, view, whoami</span><br></pre></td></tr></table></figure><blockquote><p> 打开你的Node安装目录，仔细分析发现NPM其实就是一个Node应用。<br>那我们的<code>npm install</code>究竟干了什么呢，当你安装完Node，就在系统中注册了npm命令。<br>打开<code>Node安装目录\node_modules\npm\bin</code>,有npm.cmd文件与npm-cli.js文件<br>npm.cmd入口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">:: Created by npm, please don&apos;t edit manually.</span><br><span class="line">//关闭回显</span><br><span class="line">@ECHO OFF</span><br><span class="line"></span><br><span class="line">//本地化</span><br><span class="line">SETLOCAL</span><br><span class="line"></span><br><span class="line">//%~dp0代表当前位置</span><br><span class="line">SET &quot;NODE_EXE=%~dp0\node.exe&quot;</span><br><span class="line">IF NOT EXIST &quot;%NODE_EXE%&quot; (</span><br><span class="line">  SET &quot;NODE_EXE=node&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//&apos;CALL &quot;%NODE_EXE%&quot; &quot;%NPM_CLI_JS%&quot; prefix -g&apos;这一行在npm.cmd起的作用是</span><br><span class="line">//如果能运行这两个命令并且得到结果的话将NPM_PREFIX_NPM_CLI_JS的值设置</span><br><span class="line">//为&quot;\node_modules\npm\bin\npm-cli.js&quot;</span><br><span class="line"></span><br><span class="line">SET &quot;NPM_CLI_JS=%~dp0\node_modules\npm\bin\npm-cli.js&quot;</span><br><span class="line">FOR /F &quot;delims=&quot; %%F IN (&apos;CALL &quot;%NODE_EXE%&quot; &quot;%NPM_CLI_JS%&quot; prefix -g&apos;) DO (</span><br><span class="line">  SET &quot;NPM_PREFIX_NPM_CLI_JS=%%F\node_modules\npm\bin\npm-cli.js&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">IF EXIST &quot;%NPM_PREFIX_NPM_CLI_JS%&quot; (</span><br><span class="line">  SET &quot;NPM_CLI_JS=%NPM_PREFIX_NPM_CLI_JS%&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&quot;%NODE_EXE%&quot; &quot;%NPM_CLI_JS%&quot; %*</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//现在实际启动npm并运行命令</span></span><br><span class="line">  <span class="comment">//这是如何以编程方式使用npm：</span></span><br><span class="line">conf._exit = <span class="literal">true</span></span><br><span class="line">npm.load(conf, <span class="function"><span class="keyword">function</span> (<span class="params">er</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (er) <span class="keyword">return</span> errorHandler(er)</span><br><span class="line">  npm.commands[npm.command](npm.argv, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// https://www.youtube.com/watch?v=7nfPu8qTiQU</span></span><br><span class="line">    <span class="keyword">if</span> (!err &amp;&amp; npm.config.get(<span class="string">'ham-it-up'</span>) &amp;&amp; !npm.config.get(<span class="string">'json'</span>) &amp;&amp; !npm.config.get(<span class="string">'parseable'</span>) &amp;&amp; npm.command !== <span class="string">'completion'</span>) &#123;</span><br><span class="line">      output(<span class="string">'\n 🎵 I Have the Honour to Be Your Obedient Servant,🎵 ~ npm 📜🖋\n'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    errorHandler.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p> 打开<code>Node安装目录\node_modules\npm\lib</code>，找到install.js文件<br>（细心的你可能已经发现了基本上每一个js文件对应了上述的一个命令），用编辑器打开install.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">// npm install &lt;pkg&gt; &lt;pkg&gt; &lt;pkg&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// See doc/cli/npm-install.md for more description</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Managing contexts...</span></span><br><span class="line"><span class="comment">// there's a lot of state associated with an "install" operation, including</span></span><br><span class="line"><span class="comment">// packages that are already installed, parent packages, current shrinkwrap, and</span></span><br><span class="line"><span class="comment">// so on. We maintain this state in a "context" object that gets passed around.</span></span><br><span class="line"><span class="comment">// every time we dive into a deeper node_modules folder, the "family" list that</span></span><br><span class="line"><span class="comment">// gets passed along uses the previous "family" list as its __proto__.  Any</span></span><br><span class="line"><span class="comment">// "resolved precise dependency" things that aren't already on this object get</span></span><br><span class="line"><span class="comment">// added, and then that's passed to the next generation of installation.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = install</span><br><span class="line"><span class="built_in">module</span>.exports.Installer = Installer</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> usage = <span class="built_in">require</span>(<span class="string">'./utils/usage'</span>)</span><br><span class="line"></span><br><span class="line">install.usage = usage(</span><br><span class="line">  <span class="string">'install'</span>,</span><br><span class="line">  <span class="string">'\nnpm install (with no args, in package dir)'</span> +</span><br><span class="line">  <span class="string">'\nnpm install [&lt;@scope&gt;/]&lt;pkg&gt;'</span> +</span><br><span class="line">  <span class="string">'\nnpm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;tag&gt;'</span> +</span><br><span class="line">  <span class="string">'\nnpm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;version&gt;'</span> +</span><br><span class="line">  <span class="string">'\nnpm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;version range&gt;'</span> +</span><br><span class="line">  <span class="string">'\nnpm install &lt;folder&gt;'</span> +</span><br><span class="line">  <span class="string">'\nnpm install &lt;tarball file&gt;'</span> +</span><br><span class="line">  <span class="string">'\nnpm install &lt;tarball url&gt;'</span> +</span><br><span class="line">  <span class="string">'\nnpm install &lt;git:// url&gt;'</span> +</span><br><span class="line">  <span class="string">'\nnpm install &lt;github username&gt;/&lt;github project&gt;'</span>,</span><br><span class="line">  <span class="string">'[--save-prod|--save-dev|--save-optional] [--save-exact] [--no-save]'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//175行定义install方法，这个方法进入核心的install逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">where, args, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!cb) &#123;</span><br><span class="line">    cb = args</span><br><span class="line">    args = where</span><br><span class="line">    where = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> globalTop = path.resolve(npm.globalDir, <span class="string">'..'</span>)</span><br><span class="line">  <span class="keyword">if</span> (!where) &#123;</span><br><span class="line">    where = npm.config.get(<span class="string">'global'</span>)</span><br><span class="line">          ? globalTop</span><br><span class="line">          : npm.prefix</span><br><span class="line">  &#125;</span><br><span class="line">  validate(<span class="string">'SAF'</span>, [where, args, cb])</span><br><span class="line">  <span class="comment">// the /path/to/node_modules/..</span></span><br><span class="line">  <span class="keyword">var</span> dryrun = !!npm.config.get(<span class="string">'dry-run'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (npm.config.get(<span class="string">'dev'</span>)) &#123;</span><br><span class="line">    log.warn(<span class="string">'install'</span>, <span class="string">'Usage of the `--dev` option is deprecated. Use `--only=dev` instead.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (where === globalTop &amp;&amp; !args.length) &#123;</span><br><span class="line">    args = [<span class="string">'.'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  args = args.filter(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(a) !== npm.prefix</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Installer(where, dryrun, args).run(cb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//205行定义了Installer类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Installer</span> (<span class="params">where, dryrun, args, opts</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//358行 跟踪器创建</span></span><br><span class="line">Installer.prototype.newTracker = <span class="function"><span class="keyword">function</span> (<span class="params">tracker, name, size</span>) </span>&#123;</span><br><span class="line">  validate(<span class="string">'OS'</span>, [tracker, name])</span><br><span class="line">  <span class="keyword">if</span> (size) validate(<span class="string">'N'</span>, [size])</span><br><span class="line">  <span class="keyword">this</span>.progress[name] = tracker.newGroup(name, size)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    process.emit(<span class="string">'time'</span>, <span class="string">'stage:'</span> + name)</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Installer.prototype.finishTracker = <span class="function"><span class="keyword">function</span> (<span class="params">name, cb</span>) </span>&#123;</span><br><span class="line">  validate(<span class="string">'SF'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  process.emit(<span class="string">'timeEnd'</span>, <span class="string">'stage:'</span> + name)</span><br><span class="line">  cb()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Installer.prototype.loadCurrentTree = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  validate(<span class="string">'F'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  log.silly(<span class="string">'install'</span>, <span class="string">'loadCurrentTree'</span>)</span><br><span class="line">  <span class="keyword">var</span> todo = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.global) &#123;</span><br><span class="line">    todo.push([<span class="keyword">this</span>, <span class="keyword">this</span>.readGlobalPackageData])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    todo.push([<span class="keyword">this</span>, <span class="keyword">this</span>.readLocalPackageData])</span><br><span class="line">  &#125;</span><br><span class="line">  todo.push([<span class="keyword">this</span>, <span class="keyword">this</span>.normalizeCurrentTree])</span><br><span class="line">  chain(todo, cb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//387行 创建node</span></span><br><span class="line"><span class="keyword">var</span> createNode = <span class="built_in">require</span>(<span class="string">'./install/node.js'</span>).create</span><br></pre></td></tr></table></figure><blockquote><p>  下面是官方介绍</p></blockquote><p>This command installs a package, and any packages that it depends on. If the<br>package has a package-lock or shrinkwrap file, the installation of dependencies<br>will be driven by that, with an <code>npm-shrinkwrap.json</code> taking precedence if both<br>files exist. See package-lock.json(5) and npm-shrinkwrap(1).</p><p>A <code>package</code> is:</p><ul><li>a) a folder containing a program described by a <code>package.json(5)</code> file</li><li>b) a gzipped tarball containing (a)</li><li>c) a url that resolves to (b)</li><li>d) a <code>&lt;name&gt;@&lt;version&gt;</code> that is published on the registry (see <code>npm-registry(7)</code>) with (c)</li><li>e) a <code>&lt;name&gt;@&lt;tag&gt;</code> (see <code>npm-dist-tag(1)</code>) that points to (d)</li><li>f) a <code>&lt;name&gt;</code> that has a “latest” tag satisfying (e)</li><li>g) a <code>&lt;git remote url&gt;</code> that resolves to (a)</li></ul><p>总结下来就是：</p><ul><li>执行工程自身</li><li>确定首层依赖模块</li><li>根据模块信息递归网络获取模块</li><li>模块扁平化，解决重复冗余问题</li><li>安装模块，更新node_modules</li><li>自身生命周期，生成或更新package.json</li></ul><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/201862617100764860.jpg" alt=""></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h3><p><a href="https://www.cnblogs.com/lykbk/p/erwerwerwerwerwerwe.html" target="_blank" rel="noopener">Maven和Gradle对比</a></p><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/22" target="_blank" rel="noopener">第20题：介绍下 npm 模块安装机制</a></p><p><a href="https://www.cnblogs.com/libin-1/p/5907175.html" target="_blank" rel="noopener">Node.js npm 详解</a>;</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;今晩はお月さん&quot;&gt;&lt;a href=&quot;#今晩はお月さん&quot; class=&quot;headerlink&quot; title=&quot;今晩はお月さん&quot;&gt;&lt;/a&gt;&lt;strong&gt;今晩はお月さん&lt;/strong&gt;&lt;/h3&gt;
        &lt;div id=&quot;aplayer-qnDVJJRT&quot; class=&quot;aplayer aplayer-tag-marker&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
            &lt;pre class=&quot;aplayer-lrc-content&quot;&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;script&gt;
          var ap = new APlayer({
            element: document.getElementById(&quot;aplayer-qnDVJJRT&quot;),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: &quot;今晩はお月さん&quot;,
              author: &quot;ハンバート&quot;,
              url: &quot;https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/705a_b88c_b84e_ced8f9e08c9e6c9970ee894a66361a6a.mp3&quot;,
              pic: &quot;https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/703687441788470.jpg&quot;,
              lrc: &quot;&quot;
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        &lt;/script&gt;
&lt;p&gt;先放松一心情，听一首有趣的歌！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/20180624161012_Btt8i.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术栈" scheme="https://www.wxqdoit.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>博客迁移</title>
    <link href="https://www.wxqdoit.com/20190216/migrate/"/>
    <id>https://www.wxqdoit.com/20190216/migrate/</id>
    <published>2019-02-15T17:04:26.000Z</published>
    <updated>2019-02-15T17:20:45.979Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这两天一直在弄博客迁移，总算是肝好了</p><h3 id="服务迁移"><a href="#服务迁移" class="headerlink" title="服务迁移"></a><strong>服务迁移</strong></h3><p>之前的博客是我自己用Node搭建的，虽然说功能都有，但是也只能玩玩。</p><p>现在换到了Hexo(虽然hexo也是node搭建的</p><p>服务器托管由我1M的小水管迁移到github上了，准备把自己的服务器用来做点别的。</p><h3 id="域名迁移"><a href="#域名迁移" class="headerlink" title="域名迁移"></a><strong>域名迁移</strong></h3><p>从 <a href="https://www.wxqdoit.com">https://www.wxqdoit.com</a> 改成 <a href="https://www.wxqdoit.cn" target="_blank" rel="noopener">https://www.wxqdoit.cn</a></p><p>就是从 .com 变为 .cn 啦，话说又得续费了！</p><h3 id="资源迁移"><a href="#资源迁移" class="headerlink" title="资源迁移"></a><strong>资源迁移</strong></h3><p>之前的图片什么的都存在我自己的服务器上，现在大部分都使用了CDN。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天一直在弄博客迁移，总算是肝好了&lt;/p&gt;
&lt;h3 id=&quot;服务迁移&quot;&gt;&lt;a href=&quot;#服务迁移&quot; class=&quot;headerlink&quot; title=&quot;服务迁移&quot;&gt;&lt;/a&gt;&lt;strong&gt;服务迁移&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;之前的博客是我自己用Node搭建的，虽然说功能都有，但是也只能玩玩。&lt;/p&gt;
&lt;p&gt;现在换到了Hexo(虽然hexo也是node搭建的&lt;/p&gt;
&lt;p&gt;服务器托管由我1M的小水管迁移到github上了，准备把自己的服务器用来做点别的。&lt;/p&gt;
&lt;h3 id=&quot;域名迁移&quot;&gt;&lt;a href=&quot;#域名迁移&quot; class=&quot;headerlink&quot; title=&quot;域名迁移&quot;&gt;&lt;/a&gt;&lt;strong&gt;域名迁移&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;从 &lt;a href=&quot;https://www.wxqdoit.com&quot;&gt;https://www.wxqdoit.com&lt;/a&gt; 改成 &lt;a href=&quot;https://www.wxqdoit.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.wxqdoit.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;就是从 .com 变为 .cn 啦，话说又得续费了！&lt;/p&gt;
&lt;h3 id=&quot;资源迁移&quot;&gt;&lt;a href=&quot;#资源迁移&quot; class=&quot;headerlink&quot; title=&quot;资源迁移&quot;&gt;&lt;/a&gt;&lt;strong&gt;资源迁移&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;之前的图片什么的都存在我自己的服务器上，现在大部分都使用了CDN。&lt;/p&gt;
    
    </summary>
    
      <category term="记事簿" scheme="https://www.wxqdoit.com/categories/%E8%AE%B0%E4%BA%8B%E7%B0%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>2019春节之旅</title>
    <link href="https://www.wxqdoit.com/20190209/2019SpringFestival/"/>
    <id>https://www.wxqdoit.com/20190209/2019SpringFestival/</id>
    <published>2019-02-09T15:59:16.000Z</published>
    <updated>2019-02-15T16:43:43.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="回家了"><a href="#回家了" class="headerlink" title="回家了"></a><strong>回家了</strong></h3><p>2月2号从成都赶回宜宾，下午和高中几个同学吃了一顿饭。</p><p>有赖子，蛋蛋，刘哥，致均。吃完饭回去乡下就晚上九点过了。</p><h3 id="在家这几天"><a href="#在家这几天" class="headerlink" title="在家这几天"></a><strong>在家这几天</strong></h3><p>到家后的两三天也没干啥就过去了，去了趟外公家，大年三十晚上放了一串鞭炮，然后就接着刷剧了。</p><p>初一在家，早晚吃了抄手，中午吃的汤圆。</p><p>初二去了五孃家。</p><p>初三一些亲戚来我家，我忙了一天。</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/75691872-1-6.mp4.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><a id="more"></a><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/P90207-080750.jpg" alt=""></p><h3 id="自贡这一天"><a href="#自贡这一天" class="headerlink" title="自贡这一天"></a><strong>自贡这一天</strong></h3><p>前一两天我买了初四也就是8号到自贡的汽车票，我给家里人说回成都。年前同学就叫我去自贡耍，然后我说有时间的话，如果你也不忙我就来玩一天，所以就去了，其实还是很期待的。上<br>次和大家一起聚还是在18年4月还是多久来着，我都忘了。</p><p>所以8号我老早就起床收拾出发，先是去镇上买了一些特产，虽然很low，然后挤公交到了市里汽车站，真的把我累着了。</p><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/wx_camera_1549592499057.jpg" alt=""></p><p>大概坐了两个小时的车先到了自贡，然后过了几分钟朋友来接的我。之后我把东西放宾馆，带我去了一家饭馆点了两个菜，接着我就一个人在那吃饭。</p><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/wx_camera_1549605570299.jpg" alt=""></p><p>吃了好久呆呆打车过来了。然后去了咖啡馆，尬坐了一个多小时。</p><p>没多久兰姐也到了，然后我们就在公园里面瞎逛吹牛。</p><p>晚饭吃的很好，点了很多干锅，兔子什么的，味道还是不错。吃完饭之后先是去了理工大学，爬了一段小山，然后和波波开了视频。大家都很开心</p><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/mmexport1549638280990.jpg" alt=""></p><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/P90208-193845.jpg" alt=""></p><p>然后打车去了网红桥，人巨多。</p><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/2019/mmexport1549638256350.jpg" alt=""></p><p>走到第二个上去之后就坐公交车回去了</p><p>Say, goodbye。</p><p>回到住处想了很多，不知道自己是个什么玩意儿，很累，没有方向，今年又将会怎样我实在是难以猜测。希望自己能活的开心一点吧，希望有些总还是能实现的吧。</p><p>感谢过去这一年的每一张笑脸。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;回家了&quot;&gt;&lt;a href=&quot;#回家了&quot; class=&quot;headerlink&quot; title=&quot;回家了&quot;&gt;&lt;/a&gt;&lt;strong&gt;回家了&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;2月2号从成都赶回宜宾，下午和高中几个同学吃了一顿饭。&lt;/p&gt;
&lt;p&gt;有赖子，蛋蛋，刘哥，致均。吃完饭回去乡下就晚上九点过了。&lt;/p&gt;
&lt;h3 id=&quot;在家这几天&quot;&gt;&lt;a href=&quot;#在家这几天&quot; class=&quot;headerlink&quot; title=&quot;在家这几天&quot;&gt;&lt;/a&gt;&lt;strong&gt;在家这几天&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;到家后的两三天也没干啥就过去了，去了趟外公家，大年三十晚上放了一串鞭炮，然后就接着刷剧了。&lt;/p&gt;
&lt;p&gt;初一在家，早晚吃了抄手，中午吃的汤圆。&lt;/p&gt;
&lt;p&gt;初二去了五孃家。&lt;/p&gt;
&lt;p&gt;初三一些亲戚来我家，我忙了一天。&lt;/p&gt;
&lt;div id=&quot;dplayer0&quot; class=&quot;dplayer hexo-tag-dplayer-mark&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;&lt;script&gt;(function(){var player = new DPlayer({&quot;container&quot;:document.getElementById(&quot;dplayer0&quot;),&quot;theme&quot;:&quot;#FADFA3&quot;,&quot;video&quot;:{&quot;url&quot;:&quot;https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/75691872-1-6.mp4.mp4&quot;}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()&lt;/script&gt;
    
    </summary>
    
      <category term="记事簿" scheme="https://www.wxqdoit.com/categories/%E8%AE%B0%E4%BA%8B%E7%B0%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年终总结</title>
    <link href="https://www.wxqdoit.com/20190201/2018/"/>
    <id>https://www.wxqdoit.com/20190201/2018/</id>
    <published>2019-02-01T15:53:28.000Z</published>
    <updated>2019-03-05T15:42:28.757Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a><strong>毕业</strong></h3><p>6月份毕业了</p><p>论文修改…</p><p>论文答辩…</p><p>领取学位证…</p><h3 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a><strong>搬家</strong></h3><p>5月初搬出了与同学的合租房，一个人在自如租了个单间</p><p>7月底从自如搬出，又和另外两同学一起合租</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a><strong>工作</strong></h3><p>3月初还了工作</p><p>从前端到小游戏</p><h3 id="刷剧"><a href="#刷剧" class="headerlink" title="刷剧"></a><strong>刷剧</strong></h3><p>《逃避可耻但很有用》</p><p>《将夜》</p><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a><strong>电影</strong></h3><p>《爱情公寓》</p><p>《古墓丽影：源起之战》</p><a id="more"></a><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a><strong>读书</strong></h3><p>《克苏鲁神话》</p><p>《时间简史》</p><p>《安娜·卡列尼娜》（这本书我整整看了一年）</p><p>《万历十五年》</p><p>《诗经》（读了一部分）</p><p>《小王子》</p><p>《史蒂夫·乔布斯传》</p><p>《淘宝技术这十年》</p><p>《腾讯传》</p><p>《普京传》</p><h3 id="追番"><a href="#追番" class="headerlink" title="追番"></a><strong>追番</strong></h3><p>《火影忍者·博人传》</p><p>《卫宫家今天的饭》</p><p>《千绪的通学路》</p><p>《工作细胞》</p><p>《后街女孩》</p><p>《青春猪头少年不会梦到兔女郎学姐》</p><p>《关于我转生变成史莱姆这档事》</p><p>《一人之下》</p><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a><strong>活动</strong></h3><p>八月，开源中国原创会&amp;数博会</p><p>五月，成都欢乐谷</p><p>三月，桃花故里</p><p>一月，兴隆湖</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;毕业&quot;&gt;&lt;a href=&quot;#毕业&quot; class=&quot;headerlink&quot; title=&quot;毕业&quot;&gt;&lt;/a&gt;&lt;strong&gt;毕业&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;6月份毕业了&lt;/p&gt;
&lt;p&gt;论文修改…&lt;/p&gt;
&lt;p&gt;论文答辩…&lt;/p&gt;
&lt;p&gt;领取学位证…&lt;/p&gt;
&lt;h3 id=&quot;搬家&quot;&gt;&lt;a href=&quot;#搬家&quot; class=&quot;headerlink&quot; title=&quot;搬家&quot;&gt;&lt;/a&gt;&lt;strong&gt;搬家&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;5月初搬出了与同学的合租房，一个人在自如租了个单间&lt;/p&gt;
&lt;p&gt;7月底从自如搬出，又和另外两同学一起合租&lt;/p&gt;
&lt;h3 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;&lt;strong&gt;工作&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;3月初还了工作&lt;/p&gt;
&lt;p&gt;从前端到小游戏&lt;/p&gt;
&lt;h3 id=&quot;刷剧&quot;&gt;&lt;a href=&quot;#刷剧&quot; class=&quot;headerlink&quot; title=&quot;刷剧&quot;&gt;&lt;/a&gt;&lt;strong&gt;刷剧&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;《逃避可耻但很有用》&lt;/p&gt;
&lt;p&gt;《将夜》&lt;/p&gt;
&lt;h3 id=&quot;电影&quot;&gt;&lt;a href=&quot;#电影&quot; class=&quot;headerlink&quot; title=&quot;电影&quot;&gt;&lt;/a&gt;&lt;strong&gt;电影&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;《爱情公寓》&lt;/p&gt;
&lt;p&gt;《古墓丽影：源起之战》&lt;/p&gt;
    
    </summary>
    
      <category term="记事簿" scheme="https://www.wxqdoit.com/categories/%E8%AE%B0%E4%BA%8B%E7%B0%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>开发Hybrid App的技术选型</title>
    <link href="https://www.wxqdoit.com/20181224/HybridApp/"/>
    <id>https://www.wxqdoit.com/20181224/HybridApp/</id>
    <published>2018-12-24T07:39:08.000Z</published>
    <updated>2019-02-15T17:20:46.181Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>如果我们把Hybrid App理解为运行在android或者ios以及其他移动终端设备上的应用，也可以叫做H5 APP，这种开发应用的模式结合web开发技术与Native开发的部分技术，通常也被称为混合开发模式。</p><h2 id="二、移动应用开发的三种方式"><a href="#二、移动应用开发的三种方式" class="headerlink" title="二、移动应用开发的三种方式"></a>二、移动应用开发的三种方式</h2><ul><li>Native App：原生应用，在android端通常使用Java或Kotlin开发，ios端使用OC或者Swift开发</li><li>Hybrid App：混合应用，结合Web与Native技术开发</li><li>Web App：web应用，网页三剑客html+css+js</li></ul><p>Native App开发依旧是移动应用的主导，但如今的Native App或多或少会嵌入一些web页面，诸如淘宝、京东等APP，所以如今真正意义上的原生应用又该如何去定义呢？Hybrid App受到越来越多开发者的追捧与其开发周期短，开发难度小，跨平台离不开，当然APP的效果也成为大家诟病的话题，如首屏打开缓慢，动画效果不够流畅等。</p><p><img src="https://oscimg.oschina.net/oscnet/37c5957391fe335efba05e459efcce79566.jpg" alt=""></p><a id="more"></a><p>三种方式的技术比较（图片来自网络）</p><h2 id="三、Hybrid-App开发的核心"><a href="#三、Hybrid-App开发的核心" class="headerlink" title="三、Hybrid App开发的核心"></a>三、Hybrid App开发的核心</h2><p>毫无疑问，webview是Hybrid App开发的核心。webview可以简单的理解为一个浏览器。webview 使用的是手机自带的浏览器内核，一般来说，手机厂家在内置浏览器的时候都会对其内核做一定的修改，所以在webview渲染的内容可能或有些差异，但是这基本上不影响APP的开发。绝大部分手机都使用的是WebKit作为webview的渲染引擎。关于WebKit以及其他的浏览器内核知识可以查看<a href="https://zhuanlan.zhihu.com/p/31753108" target="_blank" rel="noopener">这里</a>。</p><p>关于webview的知识点非常多，如在android上常用的属性：WebSettings、WebViewClient，与JavaScript的交互，js注入漏洞，jsBridge等等，在此以Kotlin为例实现一个简单的例子，项目源码点击<a href="https://gitee.com/Pleasecall_Littlestrong/kotlin-webview-test-app" target="_blank" rel="noopener">这里</a>。</p><p>MAinActivity.kt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.wxqdoit.kotlintest</span><br><span class="line"><span class="keyword">import</span> android.os.Build</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.RequiresApi</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.BottomNavigationView</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    <span class="meta">@RequiresApi</span>(Build.VERSION_CODES.O)</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        bottom_navigation.setOnNavigationItemSelectedListener(mBottomNavigationView)</span><br><span class="line">        val fragments: MutableList&lt;Fragment&gt; = ArrayList&lt;Fragment&gt;()</span><br><span class="line">        fragments.add(Fragment1(<span class="string">"https://www.baidu.com"</span>))</span><br><span class="line">        fragments.add(Fragment1(<span class="string">"https://www.jianshu.com"</span>))</span><br><span class="line">        fragments.add(Fragment1(<span class="string">"https://aidn.jp/mikutap/"</span>))</span><br><span class="line">        vp_main.adapter = ViewPagerAdapter(supportFragmentManager,fragments)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> val mBottomNavigationView = BottomNavigationView.OnNavigationItemSelectedListener &#123; item -&gt;</span><br><span class="line">        when (item.itemId) &#123;</span><br><span class="line">            R.id.word -&gt; &#123;</span><br><span class="line">                <span class="comment">//vp_main.currentItem = 0</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"点击了"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">                <span class="keyword">return</span><span class="meta">@OnNavigationItemSelectedListener</span> <span class="keyword">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            R.id.pic -&gt; &#123;</span><br><span class="line">                <span class="comment">//vp_main.currentItem = 1</span></span><br><span class="line">                <span class="keyword">return</span><span class="meta">@OnNavigationItemSelectedListener</span> <span class="keyword">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            R.id.me -&gt; &#123;</span><br><span class="line">                <span class="comment">//vp_main.currentItem = 2</span></span><br><span class="line">                <span class="keyword">return</span><span class="meta">@OnNavigationItemSelectedListener</span> <span class="keyword">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewPagerAdapter.kt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.wxqdoit.kotlintest</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter</span><br><span class="line"><span class="comment">//继承 FragmentPagerAdapter 创建适配器</span></span><br><span class="line">class ViewPagerAdapter(fm: FragmentManager?, var list: List&lt;Fragment&gt;) : FragmentPagerAdapter(fm) &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">getItem</span><span class="params">(position: Int)</span>: Fragment </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(position)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">override fun <span class="title">getCount</span><span class="params">()</span>: Int </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fragment1.kt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.wxqdoit.kotlintest</span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint</span><br><span class="line"><span class="keyword">import</span> android.os.Build</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.RequiresApi</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebResourceRequest</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebViewClient</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.fragment1.view.*</span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"ValidFragment"</span>)</span><br><span class="line">class Fragment1(private val url: String):Fragment() &#123;</span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"SetJavaScriptEnabled"</span>)</span><br><span class="line">    <span class="meta">@RequiresApi</span>(Build.VERSION_CODES.O)</span><br><span class="line">    <span class="function">override fun <span class="title">onCreateView</span><span class="params">(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?)</span>: View? </span>&#123;</span><br><span class="line">        val view = inflater.inflate(R.layout.fragment1, container, <span class="keyword">false</span>)</span><br><span class="line">        val webView = view.testWebView</span><br><span class="line">        webView!!.webViewClient = webClient</span><br><span class="line">        webView.settings.javaScriptEnabled = <span class="keyword">true</span></span><br><span class="line">        webView.settings.allowContentAccess = <span class="keyword">true</span></span><br><span class="line">        webView.settings.layoutAlgorithm</span><br><span class="line">        webView.loadUrl(url)</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> val webClient = object : WebViewClient() &#123;</span><br><span class="line">        <span class="meta">@RequiresApi</span>(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">        <span class="function">override fun <span class="title">shouldOverrideUrlLoading</span><span class="params">(view: WebView, request:WebResourceRequest )</span>: Boolean </span>&#123;</span><br><span class="line">            view.loadUrl(request.url.toString())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://oscimg.oschina.net/oscnet/5e4fe9ed91446935502777c27c0b1676e00.jpg" alt=""> <img src="https://oscimg.oschina.net/oscnet/0bad1963a8969447d5e150844ac76a87cee.jpg" alt=""></p><h2 id="四、移动APP适配"><a href="#四、移动APP适配" class="headerlink" title="四、移动APP适配"></a>四、移动APP适配</h2><p>做过原生开发的都知道美术需要出几套图以适配不同的分辨率，720×1280、750×1334、1080×1920、1242×2208，更大或者更小的屏在市面上也常见，android上字体大小通常以dp、sp作为单位。Hybrid App在只有一套美术UI的情况下应当如何处理以适配不同的机型呢？</p><p>媒体查询、百分比，或是直接使用web端常用的单位px、em、rem以及vh、vw，都是常用的适配方案。在设计稿给到固定宽度的情况下，相对而言，使用rem作为单位是比较合理的选择，至于移动设备适配，屏幕宽度，逻辑像素、物理像素、dpi等知识就不在此处赘述，分享优秀的博客：</p><p>移动设备适配基础知识速成：<a href="https://weibo.com/p/1001603933391216084991" target="_blank" rel="noopener">weibo.com/p/1001603933391216084991</a></p><h2 id="五、flexible-js"><a href="#五、flexible-js" class="headerlink" title="五、flexible.js"></a>五、flexible.js</h2><p>flexible是淘宝使用的移动端适配方案，原理即根据机型分辨率进行适配，设置根font-size，使用相对单位rem。其核心功能如下：</p><ul><li>判断meta标签，动态改写标签</li><li>给html标签添加data-dpr属性</li><li>给html标签添加font-size属性</li></ul><p>根font-size（即html标签上的）属性值即为一个单位的rem，在chrome浏览器上，默认的font-size值为16px：即16px=1rem</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getComputedStyle(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>])[<span class="string">"font-size"</span>];</span><br><span class="line"><span class="comment">//16px</span></span><br></pre></td></tr></table></figure><p>flexible.js核心代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">    <span class="keyword">if</span> (width / dpr &gt; <span class="number">540</span>) &#123;</span><br><span class="line">        width = <span class="number">540</span> * dpr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rem = width / <span class="number">10</span>;</span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">'px'</span>;</span><br><span class="line">    docEl.setAttribute(<span class="string">"font-size"</span>,rem + <span class="string">'px'</span>);</span><br><span class="line">    flexible.rem = win.rem = rem;</span><br><span class="line">&#125;</span><br><span class="line">win.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(tid);</span><br><span class="line">    tid = setTimeout(refreshRem, <span class="number">200</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">win.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">        clearTimeout(tid);</span><br><span class="line">        tid = setTimeout(refreshRem, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>将设备宽度分为10份，而每一份视作一个单位，再将html的font-size设置为这个单位即：</p><p>font-size = 750/10 = 75px；</p><p>1rem = 75px；</p><p>如果在宽度为750px的设备上，完全符合上述换算。如果在iphone6/7/8上，宽度为375，那么:</p><p>font-size = 375/10 = 37.5px；</p><p>1rem = 37.5px；</p><p>现在以宽为750的设计稿为例，有一个款750px高75px的按钮 ；在iphone6/7/8上（实际宽375px）我们实际看到的宽高是多少呢？</p><p>width = 750/75 = 10rem —&gt; 10rem(在iphone6/7/8上) = 37.5px*10 = 375px；</p><p>height = 75/75 = 1rem —&gt;1rem(在iphone6/7/8上) = 37.5px;</p><p>不难看出，只需要将这个单位作为除数即可计算出所需要的值；</p><h2 id="六、打包工具"><a href="#六、打包工具" class="headerlink" title="六、打包工具"></a>六、打包工具</h2><p>开发完成之后使用hbuilder或cordova打包成为android APK或者ios IPA。我更偏向于cordova，插件相对更多，社区更加活跃，稳定的更新维护。当然，孰优孰劣各自体会。下文会具体介绍cordova的相关知识。</p><p>Hbuild：<a href="http://www.dcloud.io/" target="_blank" rel="noopener">http://www.dcloud.io/</a></p><p>cordova：<a href="https://cordova.apache.org/" target="_blank" rel="noopener">https://cordova.apache.org/</a></p><h2 id="七、UI框架"><a href="#七、UI框架" class="headerlink" title="七、UI框架"></a>七、UI框架</h2><p>开发框架常用的有ionic，mui，jQuery Mobile，weui等等。就事实而论，当设计稿给到开发者时，或者这些都用不到，全套UI自己写也是常见的。</p><h2 id="八、angular、react还是vue？"><a href="#八、angular、react还是vue？" class="headerlink" title="八、angular、react还是vue？"></a>八、angular、react还是vue？</h2><p>angular、react相对而言比较重，vue显得轻量一些，当开发大型SPA应用时，前两者是不错的选择，而vue完整的工具链以及活跃的社区也适应绝大部分的开发场景。</p><h2 id="九、jQuery还用吗？"><a href="#九、jQuery还用吗？" class="headerlink" title="九、jQuery还用吗？"></a>九、jQuery还用吗？</h2><p>对于事件的封装，DOM操作的实现都是毫无疑问需要使用的，同时集成的ajax封装也必不可少，不过不论是Web APP的开发还是 Hybrid App的开发，jq都是不二之选。但当我们在对请求过滤的处理时，这些get，post方法基本上不能满足我们的需求，所以需要对请求进行二次封装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用请求数据接口</span></span><br><span class="line"><span class="comment">     * @param reqUrl</span></span><br><span class="line"><span class="comment">     * @param reqType</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     * @param fn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    commonRequest: <span class="function"><span class="keyword">function</span> <span class="title">commonRequest</span>(<span class="params">reqUrl, reqType, data, fn</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: reqUrl,</span><br><span class="line">            type: reqType,</span><br><span class="line">            data: data,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                fn(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                $.lightTip.error(<span class="string">"网络请求错误-"</span> + data.status, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二次封装get请求</span></span><br><span class="line"><span class="comment">     * @param reqUrl</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     * @param fn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">get</span>: function <span class="keyword">get</span>(reqUrl, data, fn) &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: reqUrl,</span><br><span class="line">            type: <span class="string">'GET'</span>,</span><br><span class="line">            data: data,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (data.meta.code === <span class="number">200</span>) &#123;</span><br><span class="line">                    fn(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(data.meta.message);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(data.meta.message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                $.lightTip.error(<span class="string">"网络请求错误-"</span> + data.status, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二次封装post请求</span></span><br><span class="line"><span class="comment">     * @param reqUrl</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     * @param fn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    post: <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">reqUrl, data, fn</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: reqUrl,</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            data: data,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (data.meta.code === <span class="number">200</span>) &#123;</span><br><span class="line">                    fn(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(data.meta.message);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(data.meta.message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                $.lightTip.error(<span class="string">"网络请求错误-"</span> + data.status, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * formData上传数据</span></span><br><span class="line"><span class="comment">     * @param reqUrl</span></span><br><span class="line"><span class="comment">     * @param reqType</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     * @param fn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    formDataReq: <span class="function"><span class="keyword">function</span> <span class="title">formDataReq</span>(<span class="params">reqUrl, reqType, data, fn</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: reqUrl,</span><br><span class="line">            data: data,</span><br><span class="line">            type: reqType,</span><br><span class="line">            processData: <span class="literal">false</span>,</span><br><span class="line">            contentType: <span class="literal">false</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (data.meta.code === <span class="number">200</span>) &#123;</span><br><span class="line">                    fn(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(data.meta.message);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(data.meta.message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                $.lightTip.error(<span class="string">"网络请求错误-"</span> + data.status, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>这样封装一次，当用户没有登录时，可以根据返回的数据进行过滤处理。</p><p>当然如果你不用jq也可以选择其他的类库如封装ajax请求的<a href="https://www.npmjs.com/search?q=axios" target="_blank" rel="noopener">axios</a>！</p><h2 id="十、swiper是个好东西"><a href="#十、swiper是个好东西" class="headerlink" title="十、swiper是个好东西"></a>十、swiper是个好东西</h2><p><a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">swiper</a>常用于移动端网站的内容触摸滑动，是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端，Swiper能实现触屏焦点图、触屏Tab切换、触屏多图切换等常用效。这个插件功能确实强大，官网惊艳，api文档走心，性能不错。用作APP开发的主容器亦有一战之力。</p><h2 id="十一、cordova开发详解"><a href="#十一、cordova开发详解" class="headerlink" title="十一、cordova开发详解"></a>十一、cordova开发详解</h2><h3 id="1、cordova开发环境搭建，以android为例"><a href="#1、cordova开发环境搭建，以android为例" class="headerlink" title="1、cordova开发环境搭建，以android为例"></a>1、<a href="https://cordova.apache.org/" target="_blank" rel="noopener">cordova</a>开发环境搭建，以android为例</h3><pre><code>1、安装jdk（建议jdk8+），配置环境变量；2、安装android sdk（至少到27，也可以安装android studio依赖安装），配置环境变量；3、安装node（npm，也可以选择使用yarn）（node建议8+），如果不是默认安装，请配置环境变量；4、安装bower，用以下载各种前端类库；5、使用npm install -g cordova全局安装cordova，如果安装过慢或失败请科学上网；</code></pre><h3 id="2、创建一个app并运行起来"><a href="#2、创建一个app并运行起来" class="headerlink" title="2、创建一个app并运行起来"></a>2、创建一个app并运行起来</h3><pre><code>1、cordova create \[文件夹名\] \[包名\] \[app名\]</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova create hello com.example.hello HelloWorld</span><br></pre></td></tr></table></figure><pre><code>2、添加平台（以android为例）</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd hello</span><br><span class="line"></span><br><span class="line">$ cordova platform add android</span><br></pre></td></tr></table></figure><pre><code>3、build项目</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br><span class="line">......</span><br><span class="line">.....</span><br><span class="line">...</span><br><span class="line">.</span><br><span class="line">BUILD SUCCESSFUL in 7s</span><br><span class="line">47 actionable tasks: 1 executed, 46 up-to-date</span><br><span class="line">Built the following apk(s):</span><br><span class="line">        D:\dev\****\****\****\platforms\android\app\build\outputs\apk\debug\app-debug.apk</span><br></pre></td></tr></table></figure><p>在路径：\platforms\android\app\build\outputs\apk\debug\app-debug.apk下可以找到apk文件。</p><h3 id="3、常用命令"><a href="#3、常用命令" class="headerlink" title="3、常用命令"></a>3、常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Global Commands</span><br><span class="line">    create ............................. 创建项目</span><br><span class="line">    help ............................... 获取帮助</span><br><span class="line">    telemetry .......................... 开启或关闭遥测采集</span><br><span class="line">    config ............................. 全局配置</span><br><span class="line">Project Commands</span><br><span class="line">    info ............................... 项目基本信息</span><br><span class="line">    requirements ....................... 检查并打印出指定平台的所有要求</span><br><span class="line">    platform ........................... 管理项目平台</span><br><span class="line">    plugin ............................. 管理插件</span><br><span class="line">    compile ............................ 编译项目</span><br><span class="line">    clean .............................. 清除项目</span><br></pre></td></tr></table></figure><p>更多命令可以到<a href="https://cordova.apache.org/" target="_blank" rel="noopener">官网</a>查看。</p><h3 id="4、项目结构"><a href="#4、项目结构" class="headerlink" title="4、项目结构"></a>4、项目结构</h3><p>如果项目成功运行，您看到的项目结构应该如下：</p><p><img src="https://oscimg.oschina.net/oscnet/007ba7bd3e99c4c9cc7741168f52f02d57c.jpg" alt=""></p><p>www文件夹作为开发主文件夹；</p><p>res文件夹存放app的闪屏图片和icon；</p><p>plugins文件夹存放插件；</p><p>plaatforms文件夹存放诸如android、ios等各端的文件；</p><p>node-modules文件夹自然是依赖的各个模块</p><p>config.xml是项目的配置文件，你添加的插件将会在里面显示，如状态栏插件，你可以添加更多插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin name=&quot;cordova-plugin-statusbar&quot; spec=&quot;^2.4.2&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="5、常用插件收集："><a href="#5、常用插件收集：" class="headerlink" title="5、常用插件收集："></a>5、常用插件收集：</h3><p>phonegap-plugin-barcodescanner ： 二维码扫描</p><p>cordova-plugin-statusbar：状态栏</p><p>cordova-plugin-inappbrowser： 内置浏览</p><p>cordova-plugin-camera：照相机</p><p>插件太多可查看<a href="http://doc.wex5.com/cordova-plugins/" target="_blank" rel="noopener">这里</a></p><p>官方的插件搜索地址点击<a href="https://cordova.apache.org/plugins/" target="_blank" rel="noopener">这里</a></p><h3 id="6、插件使用，以imagePicker为例子"><a href="#6、插件使用，以imagePicker为例子" class="headerlink" title="6、插件使用，以imagePicker为例子"></a>6、插件使用，以imagePicker为例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-imagepicker</span><br></pre></td></tr></table></figure><p> 使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>,onDeviceReady);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"onDeviceReady"</span>);</span><br><span class="line">            $(<span class="built_in">document</span>).on(<span class="string">"tap"</span>,<span class="string">"#getPictures"</span>,()=&gt;&#123;</span><br><span class="line">                <span class="built_in">window</span>.imagePicker.getPictures(</span><br><span class="line">                    <span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; results.length; i++) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">'Image URI: '</span> + results[i]);</span><br><span class="line">                            alert(<span class="string">'Image URI: '</span> + results[i]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + error);</span><br><span class="line">                        alert(<span class="string">'Error: '</span> + error);</span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                        maxImages: <span class="number">9</span>,</span><br><span class="line">                        width: <span class="number">500</span>,</span><br><span class="line">                        height: <span class="number">500</span>,</span><br><span class="line">                        quality:<span class="number">60</span></span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>当然要实现QQ登录、微信登录等功能也是完全没有问题的，只需要添加对应的插件使用就可以了。</p><h3 id="7、构建release版本以及签名"><a href="#7、构建release版本以及签名" class="headerlink" title="7、构建release版本以及签名"></a>7、构建release版本以及签名</h3><p>构建release版本<br>cordova build android –release</p><p>对 APK 签名<br>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore platforms/android/build/outputs/apk/android-release-unsigned.apk [秘钥]apk签名的相关知识比较复杂，可以阅读这一篇：<a href="http://www.cnblogs.com/wujindong/p/5647101.html" target="_blank" rel="noopener">Cordova 打包 Android release app 过程详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;如果我们把Hybrid App理解为运行在android或者ios以及其他移动终端设备上的应用，也可以叫做H5 APP，这种开发应用的模式结合web开发技术与Native开发的部分技术，通常也被称为混合开发模式。&lt;/p&gt;
&lt;h2 id=&quot;二、移动应用开发的三种方式&quot;&gt;&lt;a href=&quot;#二、移动应用开发的三种方式&quot; class=&quot;headerlink&quot; title=&quot;二、移动应用开发的三种方式&quot;&gt;&lt;/a&gt;二、移动应用开发的三种方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Native App：原生应用，在android端通常使用Java或Kotlin开发，ios端使用OC或者Swift开发&lt;/li&gt;
&lt;li&gt;Hybrid App：混合应用，结合Web与Native技术开发&lt;/li&gt;
&lt;li&gt;Web App：web应用，网页三剑客html+css+js&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Native App开发依旧是移动应用的主导，但如今的Native App或多或少会嵌入一些web页面，诸如淘宝、京东等APP，所以如今真正意义上的原生应用又该如何去定义呢？Hybrid App受到越来越多开发者的追捧与其开发周期短，开发难度小，跨平台离不开，当然APP的效果也成为大家诟病的话题，如首屏打开缓慢，动画效果不够流畅等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/37c5957391fe335efba05e459efcce79566.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术栈" scheme="https://www.wxqdoit.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>egret开发系列之scoller+list列表使用</title>
    <link href="https://www.wxqdoit.com/20181122/egret/"/>
    <id>https://www.wxqdoit.com/20181122/egret/</id>
    <published>2018-11-22T07:36:00.000Z</published>
    <updated>2019-02-15T17:20:45.917Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a><strong>一、概要</strong></h2><p>1、egret项目需要使用到滑动列表，之前在网上找了很多文章，总的来说讲的七零八落，质量也不高，加之与egret相关的资料也少之又少，所以本废柴也研究了很久才总结下来，希望给有次相关需求的小萌新起到一丢丢引导！大佬还请自动飘过。</p><p>2、滑动列表是项目中常见的组件，比如装备列表，排行榜等都需要使用到，这里egret里面使用eui中Scroller+List实现。</p><h2 id="二、实现效果预览"><a href="#二、实现效果预览" class="headerlink" title="二、实现效果预览"></a><strong>二、实现效果预览</strong></h2><p><img src="https://oscimg.oschina.net/oscnet/c3da62d19246bc3dbd429f6787a90a843f3.jpg" alt=""></p><a id="more"></a><p>大概就是一个任务角色的滑动列表，点击换装，头顶有个绿色的字展示切换状态，滑动的时候，靠近中间的item需要渐进放大，远离中间的item需要渐进缩小（瓜皮策划提的需求，希望不要被看见！！</p><p>虽然就是这么一个简单的效果，实现起来还是有一些复杂（策划：对啊，很简单啊！我：简单nmb！</p><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a><strong>三、实现</strong></h2><p><strong>1、首先默认您知道exml的使用前提下，需要准备四个文件：</strong></p><p>SkinSelectPanel.exml –&gt;界面布局exml文件；</p><p>ScrollerItem.exml –&gt;每一个小item的exml文件；</p><p>SkinSelectPanel.ts –&gt;界面布局的逻辑处理ts文件；</p><p>ScrollerItem.ts –&gt;每一个小item的逻辑处理ts文件；</p><p><strong>2、exml布局文件与ts逻辑的关联</strong></p><p>可以肯定的是，exml文件最重要的是每一个组件的命名，即右上角的ID，它将与ts里面定义的变量一一对应；记住List放在Scoller里面。</p><p>点击右侧的list，关于list的布局设置可以展示出来，比如VerticalLayout，Horizontalayout等布局方式、水平垂直间距、内边距等等属性都可以安装需求设置，当然在代码里面设置也是可以的。</p><p><img src="https://oscimg.oschina.net/oscnet/a39cbe9008ea30c44db79e25ee43c6570c0.jpg" alt=""></p><p>SkinSelectPanel类需要继承eui.Component，构造器里需要实现super方法，并给skinName赋值。</p><p>定义的变量名与exml里组件的ID名相同这样就自动对应起来了。</p><p>此外，为了性能，特意写成单例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkinSelectPanel</span> <span class="keyword">extends</span> <span class="title">eui</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    private <span class="keyword">static</span> instance;</span><br><span class="line">    public skinBg:eui.Image;</span><br><span class="line">    public scroller:eui.Scroller;</span><br><span class="line">    public list : eui.List;</span><br><span class="line">    public roles_component:eui.Group;</span><br><span class="line">    public close_btn:eui.Image;</span><br><span class="line">    public role :RoleDragonAni;</span><br><span class="line">    public oxygen_label:eui.Label;</span><br><span class="line">    public revival_label:eui.Label;</span><br><span class="line">    public speed_label:eui.Label;</span><br><span class="line">    public rolename_label:eui.Label;</span><br><span class="line">    public des_label:eui.Label;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.skinName = <span class="string">"resource/eui_skins/SkinSelectPanel.exml"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> getInstance(): SkinSelectPanel &#123;</span><br><span class="line">        <span class="keyword">return</span> SkinSelectPanel.instance ? SkinSelectPanel.instance : </span><br><span class="line">            SkinSelectPanel.instance = <span class="keyword">new</span> SkinSelectPanel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ScrollerItem类需要继承eui.ItemRenderer，另外有一个protected类型dataChanged()方法，此方法用于监听绑定在item上数据的变化情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class ScrollerItem extends eui.ItemRenderer &#123;</span><br><span class="line">    public rolename :eui.Label;</span><br><span class="line">    public avatar:eui.Image;</span><br><span class="line">    public bgi:eui.Image;</span><br><span class="line">    public clothId:string; </span><br><span class="line">    public isSelect:eui.Image;</span><br><span class="line">    public dataManager:DataManager = DataManager.getInstance();</span><br><span class="line">    public skinSelectPanel:SkinSelectPanel = SkinSelectPanel.getInstance();</span><br><span class="line">    public socket:SocketUtils = SocketUtils.getInstance();</span><br><span class="line"> </span><br><span class="line">    public constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.skinName =&quot;resource/eui_skins/ScrollerItem.exml&quot;;</span><br><span class="line">        //this.data  这个data是在绑定数据的时候，赋到这个类上面的，稍后会用到</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected dataChanged():void&#123;</span><br><span class="line">        //此处对this.data进行操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、具体实现</strong></p><p> SkinSelectPanel 继承了eui.Component有一个protected类型的createChildren()方法，主逻辑就写在这里面吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected createChildren(): void &#123;</span><br><span class="line">    super.createChildren();</span><br><span class="line">    //list是在exml中的组件List，它有dataProvider属性，负责提供数据列表源，这个数据列表必须是</span><br><span class="line">    //eui.ArrayCollection()的,这玩意有很多方法，如replaceAll()，可以点进源码去看，很简单不赘述。</span><br><span class="line">    this.list.dataProvider = this.dataArray;</span><br><span class="line">    //itemRenderer 即渲染的item对象，这个就是我们的ScrollerItem类，这样赋值之后，每一个ScrollerItem上面</span><br><span class="line">    //都会绑定一个data对象，这个对象就是需要渲染的数据。</span><br><span class="line">    this.list.itemRenderer = ScrollerItem;</span><br><span class="line">    this.dataArray.replaceAll(this.dataManager.skinList);</span><br><span class="line"></span><br><span class="line">    this.list.addEventListener(eui.ItemTapEvent.ITEM_TAP, this.onItemTapHandler, this);</span><br><span class="line">    this.scroller.addEventListener(egret.Event.CHANGE,this.moveScroller,this);</span><br><span class="line">    this.close_btn.addEventListener(egret.TouchEvent.TOUCH_TAP,this.closePanel,this);</span><br><span class="line">    this.roles_component.addEventListener(egret.TouchEvent.TOUCH_TAP,this.playAction,this);</span><br><span class="line">    this.scroller.addEventListener(egret.Event.ADDED,this.initScale,this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样基本功能就实现完成，如果你有数据，并且代码没有问题，那么就可以看到简单的效果了，关于gif中缩放的效果，其实就是位置的不停判断：</p><p>这个你需要为scroller监听一个事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.scroller.addEventListener(egret.Event.ADDED,this.initScale,this)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 初始化item的缩放</span><br><span class="line"> */</span><br><span class="line">public initScale()&#123;</span><br><span class="line">    let sc = this.scroller;</span><br><span class="line">    if(sc.viewport.$children.length&gt;=5)&#123;                </span><br><span class="line">        for(let i = 0;i&lt;sc.viewport.$children.length;i++)&#123;</span><br><span class="line">            let chaz = sc.height/2 -(sc.viewport.$children[i].y+sc.viewport.$children[i].height/2-sc.viewport.scrollV);</span><br><span class="line">            if(Math.abs(chaz)&lt;200 &amp;&amp; Math.abs(chaz)&gt;0)&#123;</span><br><span class="line">                if(chaz&lt;0)&#123;</span><br><span class="line">                    sc.viewport.$children[i].scaleY = 1.2+chaz/1000;</span><br><span class="line">                    sc.viewport.$children[i].scaleX = 1.2+chaz/1000;</span><br><span class="line">                &#125;else if(chaz&gt;0)&#123;</span><br><span class="line">                    sc.viewport.$children[i].scaleY = 1.2-chaz/1000;</span><br><span class="line">                    sc.viewport.$children[i].scaleX = 1.2-chaz/1000;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else if(Math.abs(chaz)==0)&#123;</span><br><span class="line">                sc.viewport.$children[i].scaleX = 1.2;</span><br><span class="line">                sc.viewport.$children[i].scaleY = 1.2</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                sc.viewport.$children[i].scaleX = 1;</span><br><span class="line">                sc.viewport.$children[i].scaleY = 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.scroller.removeEventListener(egret.Event.ADDED,this.initScale,this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外关于换装的，使用了龙骨动画，网络我使用了socket.io与服务器保持长连接，这些由于不属于本文的内容就不详细讲了。</p><h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a><strong>四、结语</strong></h2><p>关于源文件如果需要的请下方留言！</p><p>如果有不懂的地方也可以方留言！</p><p>如果需要了解其他相关知识的可以私信，可以做一笔jy！</p><p>另外请各位大佬不要怼我 `(+﹏+)′</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、概要&quot;&gt;&lt;a href=&quot;#一、概要&quot; class=&quot;headerlink&quot; title=&quot;一、概要&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、概要&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;1、egret项目需要使用到滑动列表，之前在网上找了很多文章，总的来说讲的七零八落，质量也不高，加之与egret相关的资料也少之又少，所以本废柴也研究了很久才总结下来，希望给有次相关需求的小萌新起到一丢丢引导！大佬还请自动飘过。&lt;/p&gt;
&lt;p&gt;2、滑动列表是项目中常见的组件，比如装备列表，排行榜等都需要使用到，这里egret里面使用eui中Scroller+List实现。&lt;/p&gt;
&lt;h2 id=&quot;二、实现效果预览&quot;&gt;&lt;a href=&quot;#二、实现效果预览&quot; class=&quot;headerlink&quot; title=&quot;二、实现效果预览&quot;&gt;&lt;/a&gt;&lt;strong&gt;二、实现效果预览&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/c3da62d19246bc3dbd429f6787a90a843f3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术栈" scheme="https://www.wxqdoit.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>教室的那一间</title>
    <link href="https://www.wxqdoit.com/20181026/jsdnyj/"/>
    <id>https://www.wxqdoit.com/20181026/jsdnyj/</id>
    <published>2018-10-26T14:25:41.000Z</published>
    <updated>2019-02-15T17:20:46.047Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>昨天买了新手机，魅族16,8+128，真香。</p><p>其实老早就想换了，一直拖了很久，总算是实现了。</p><p>这个周并没有做太多事，浑浑噩噩，行尸走肉一般，加上有点感冒，上班也没有太好的状态。</p><p>这几天《教室的那一间》也很火，这部剧是在三中拍的，每个场景都很熟悉，除了一些演员的演技不是那么好，男主的台词语调确实不怎么样之外，总的来说，剧情还是很真实的，友情、爱情还有一点点师生情，想想自己离开高中已经四年了，如今大学毕业。但是看到那些剧情，以前经历过的事还是历历在目，打球吃饭上课玩游戏…恍然若梦。</p><p>每个班都有个胖子，有个瘦子，有娘娘腔，有女汉子，有学霸，有学渣，有小情侣，有暗恋别人的，有混子，有讨厌每一个老师的，有怎么学都学不好的学弱……</p><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/gd.png" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天买了新手机，魅族16,8+128，真香。&lt;/p&gt;
&lt;p&gt;其实老早就想换了，一直拖了很久，总算是实现了。&lt;/p&gt;
&lt;p&gt;这个周并没有做太多事，浑浑噩噩，行尸走肉一般，加上有点感冒，上班也没有太好的状态。&lt;/p&gt;
&lt;p&gt;这几天《教室的那一间》也很火，这部剧是在三中拍的，每个场景都很熟悉，除了一些演员的演技不是那么好，男主的台词语调确实不怎么样之外，总的来说，剧情还是很真实的，友情、爱情还有一点点师生情，想想自己离开高中已经四年了，如今大学毕业。但是看到那些剧情，以前经历过的事还是历历在目，打球吃饭上课玩游戏…恍然若梦。&lt;/p&gt;
&lt;p&gt;每个班都有个胖子，有个瘦子，有娘娘腔，有女汉子，有学霸，有学渣，有小情侣，有暗恋别人的，有混子，有讨厌每一个老师的，有怎么学都学不好的学弱……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/gd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="记事簿" scheme="https://www.wxqdoit.com/categories/%E8%AE%B0%E4%BA%8B%E7%B0%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>再见，RNG</title>
    <link href="https://www.wxqdoit.com/20181021/rng/"/>
    <id>https://www.wxqdoit.com/20181021/rng/</id>
    <published>2018-10-21T14:45:56.000Z</published>
    <updated>2019-02-15T17:20:46.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="我于杀戮之中盛放，亦如黎明中的花朵。-–戏命师"><a href="#我于杀戮之中盛放，亦如黎明中的花朵。-–戏命师" class="headerlink" title="我于杀戮之中盛放，亦如黎明中的花朵。  –戏命师"></a><strong>我于杀戮之中盛放，亦如黎明中的花朵。  –戏命师</strong></h3><p>今天EDG的比赛我没有看，因为不想再花时间在没有太多意义的事情上。</p><p>或许很多人都和我一样，在各种哀其不争的愤懑下，渐渐的失去了耐心。从去年四进二2：3不敌SKT，到今年拿下除了S赛的所有冠军，大家都以为要大满贯的时候，突然爆冷出局，令人心寒。所以我打算不再去期待了。</p><p>面向人群，为他们泣血哀鸣。</p><p>我的面容，就和杀你的人一样。</p><p>凭着我的技术，杀戮，也会绽放为艺术。</p><p>你…启发了我！</p><p>你将知晓真正的美。</p><p>笑一个吧，大家都在看着呢。</p><p>成为我的作品，你将得以超脱。</p><p>此刻，大美将临。</p><p><img src="https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/ti1lmcMoecsTB8Mk-U3iiV28.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我于杀戮之中盛放，亦如黎明中的花朵。-–戏命师&quot;&gt;&lt;a href=&quot;#我于杀戮之中盛放，亦如黎明中的花朵。-–戏命师&quot; class=&quot;headerlink&quot; title=&quot;我于杀戮之中盛放，亦如黎明中的花朵。  –戏命师&quot;&gt;&lt;/a&gt;&lt;strong&gt;我于杀戮之中盛放，亦如黎明中的花朵。  –戏命师&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;今天EDG的比赛我没有看，因为不想再花时间在没有太多意义的事情上。&lt;/p&gt;
&lt;p&gt;或许很多人都和我一样，在各种哀其不争的愤懑下，渐渐的失去了耐心。从去年四进二2：3不敌SKT，到今年拿下除了S赛的所有冠军，大家都以为要大满贯的时候，突然爆冷出局，令人心寒。所以我打算不再去期待了。&lt;/p&gt;
&lt;p&gt;面向人群，为他们泣血哀鸣。&lt;/p&gt;
&lt;p&gt;我的面容，就和杀你的人一样。&lt;/p&gt;
&lt;p&gt;凭着我的技术，杀戮，也会绽放为艺术。&lt;/p&gt;
&lt;p&gt;你…启发了我！&lt;/p&gt;
&lt;p&gt;你将知晓真正的美。&lt;/p&gt;
&lt;p&gt;笑一个吧，大家都在看着呢。&lt;/p&gt;
&lt;p&gt;成为我的作品，你将得以超脱。&lt;/p&gt;
&lt;p&gt;此刻，大美将临。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wxqdoit-blog-1252754215.cos.ap-chengdu.myqcloud.com/ti1lmcMoecsTB8Mk-U3iiV28.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="记事簿" scheme="https://www.wxqdoit.com/categories/%E8%AE%B0%E4%BA%8B%E7%B0%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>egret入门，这一篇应该够了</title>
    <link href="https://www.wxqdoit.com/20180802/egretlearn/"/>
    <id>https://www.wxqdoit.com/20180802/egretlearn/</id>
    <published>2018-08-02T06:46:15.000Z</published>
    <updated>2019-02-15T17:21:45.851Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="下载安装："><a href="#下载安装：" class="headerlink" title="下载安装："></a><strong>下载安装：</strong></h2><h3 id="1、EgretLauncher"><a href="#1、EgretLauncher" class="headerlink" title="1、EgretLauncher"></a><strong>1、EgretLauncher</strong></h3><p>传送门：<a href="https://egret.com/downloads/engine.html" target="_blank" rel="noopener">https://egret.com/downloads/engine.html</a></p><p>下载完成按照要求一步步安装就可以了。</p><p>引擎管理工具，包括版本管理，项目打包，项目创建，其他工具下载安装等。</p><h3 id="2、Egret-Wing"><a href="#2、Egret-Wing" class="headerlink" title="2、Egret Wing"></a><strong>2、Egret Wing</strong></h3><p>打开EgretLauncher引擎管理工具，下载安装egret wing，（这里需要账号密码登录，如果没有就去注册一个吧！</p><p>egret wing支持可视化创建、编辑和管理项目 EUI，以及 TS 代码编写和断点调试。</p><a id="more"></a><h3 id="3、更多工具"><a href="#3、更多工具" class="headerlink" title="3、更多工具"></a><strong>3、更多工具</strong></h3><p>egret的工具非常多，上述安装的wing是最主要的开发工具，其余的安装方法也差不多，简单用法介绍可以参考官网的介绍，这里不赘述。</p><p>传送门：<a href="https://www.egret.com/products/" target="_blank" rel="noopener">https://www.egret.com/products/</a></p><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a><strong>项目创建</strong></h2><h3 id="1、项目类型"><a href="#1、项目类型" class="headerlink" title="1、项目类型"></a><strong>1、项目类型</strong></h3><p>打开EgretLauncher，选中项目，点击创建项目：</p><p><img src="https://oscimg.oschina.net/oscnet/4cf031884fbf93ed9edfb80c4ba9c6aae18.jpg" alt=""></p><p>创建项目有两个选项，游戏项目和EUI项目，主要是勾选的拓展库不同，建议创建时不管是哪种，都将eui 和game两个库都勾选上。</p><p>除了默认勾选的，其他按需求勾选。</p><p>舞台尺寸一般按照美术出图设置。</p><h3 id="2、缩放模式"><a href="#2、缩放模式" class="headerlink" title="2、缩放模式"></a><strong>2、缩放模式</strong></h3><p>有很多种，具体介绍可以看官网介绍，可以说非常详细了</p><p>传送门 <a href="http://developer.egret.com/cn/github/egret-docs/Engine2D/screenAdaptation/zoomMode/index.html" target="_blank" rel="noopener">http://developer.egret.com/cn/github/egret-docs/Engine2D/screenAdaptation/zoomMode/index.html</a></p><p>旋转方式一般就横屏竖屏或者自动模式，最后创建项目。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h2><p>打开创建的项目：</p><p><img src="https://oscimg.oschina.net/oscnet/1e9509e3eaad5cf9193de6c35c895946ae4.jpg" alt=""></p><p><strong>.wing文件夹</strong> 存放使用wing打开的配置文件</p><p><strong>bin-debug文件夹</strong> 存放调试时将ts转为js文件</p><p><strong>bin-release文件夹</strong> 存放打包输出文件(打包后才会出现)</p><p><strong>libs文件夹</strong> 存放引擎源码以及三方库文件</p><p><strong>resources文件夹</strong> 存放资源文件包括图片、json、动画、exml等文件</p><p><strong>scripts文件夹</strong> 存放一些配置文件，比如android ios wxgame的配置脚本文件</p><p><strong>src文件夹</strong> 存放开发源码</p><p><strong>template文件夹</strong> 存放模板文件</p><p><strong>egretProperties.json文件</strong> 三方库的配置文件</p><p>其他的可以不用管了，如果还需要详细了解的：</p><p>传送门：<a href="http://developer.egret.com/cn/github/egret-docs/Engine2D/getStarted/helloWorld/index.html" target="_blank" rel="noopener">http://developer.egret.com/cn/github/egret-docs/Engine2D/getStarted/helloWorld/index.html</a></p><h2 id="项目入口"><a href="#项目入口" class="headerlink" title="项目入口"></a><strong>项目入口</strong></h2><p><strong>打开项目进入src文件目录</strong></p><p>以下是我修改添加注释后的源码（Main.ts）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">eui</span>.<span class="title">UILayer</span> </span>&#123;</span><br><span class="line">    protected createChildren(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.createChildren();</span><br><span class="line">        egret.lifecycle.addLifecycleListener(<span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// custom lifecycle plugin</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//inject the custom material parser</span></span><br><span class="line">        <span class="comment">//注入自定义的素材解析器</span></span><br><span class="line">        <span class="keyword">let</span> assetAdapter = <span class="keyword">new</span> AssetAdapter();</span><br><span class="line">        egret.registerImplementation(<span class="string">"eui.IAssetAdapter"</span>, assetAdapter);</span><br><span class="line">        egret.registerImplementation(<span class="string">"eui.IThemeAdapter"</span>, <span class="keyword">new</span> ThemeAdapter());</span><br><span class="line">        <span class="keyword">this</span>.runGame().catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    private <span class="keyword">async</span> runGame() &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.loadResource()</span><br><span class="line">        <span class="comment">//this.createGameScene();</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> RES.getResAsync(<span class="string">"description_json"</span>)</span><br><span class="line">        <span class="keyword">const</span> gameui:GameUi = <span class="keyword">new</span> GameUi();</span><br><span class="line">        <span class="keyword">this</span>.stage.addChild(gameui)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源加载函数，</span></span><br><span class="line">    private <span class="keyword">async</span> loadResource() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载页面添加到舞台</span></span><br><span class="line">            <span class="keyword">const</span> loadingView = <span class="keyword">new</span> LoadingUI();</span><br><span class="line">            <span class="keyword">this</span>.stage.addChild(loadingView);</span><br><span class="line">            <span class="comment">//加载默认资源，json文件，里面记录着所有的图片数据</span></span><br><span class="line">            <span class="keyword">await</span> RES.loadConfig(<span class="string">"resource/default.res.json"</span>, <span class="string">"resource/"</span>);</span><br><span class="line">            <span class="comment">//加载皮肤文件</span></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.loadTheme();</span><br><span class="line">            <span class="comment">//加载资源组</span></span><br><span class="line">            <span class="keyword">await</span> RES.loadGroup(<span class="string">"preload"</span>, <span class="number">0</span>, loadingView);</span><br><span class="line">            <span class="comment">//加载完成后将加载页面从舞台移除</span></span><br><span class="line">            <span class="keyword">this</span>.stage.removeChild(loadingView);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'资源加载完成'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private loadTheme() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//加载皮肤主题配置文件,可以手动修改这个文件。替换默认皮肤。</span></span><br><span class="line">            <span class="keyword">let</span> theme = <span class="keyword">new</span> eui.Theme(<span class="string">"resource/default.thm.json"</span>, <span class="keyword">this</span>.stage);</span><br><span class="line">            theme.addEventListener(eui.UIEvent.COMPLETE, () =&gt; &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;, <span class="keyword">this</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    private textfield: egret.TextField;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建游戏场景</span></span><br><span class="line"><span class="comment">     * Create a game scene</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private createGameScene() &#123;</span><br><span class="line">        <span class="keyword">let</span> sky = <span class="keyword">this</span>.createBitmapByName(<span class="string">"dabg@3x_png"</span>);</span><br><span class="line">        <span class="keyword">this</span>.addChild(sky);</span><br><span class="line">        <span class="keyword">let</span> stageW = <span class="keyword">this</span>.stage.stageWidth;</span><br><span class="line">        <span class="keyword">let</span> stageH = <span class="keyword">this</span>.stage.stageHeight;</span><br><span class="line">        sky.width = stageW;</span><br><span class="line">        sky.height = stageH;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据name关键字创建一个Bitmap对象。name属性请参考resources/resource.json配置文件的内容。</span></span><br><span class="line"><span class="comment">     * Create a Bitmap object according to name keyword.As for the property of name please refer to the configuration file of resources/resource.json.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private createBitmapByName(name: string) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">new</span> egret.Bitmap();</span><br><span class="line">        <span class="keyword">let</span> texture: egret.Texture = RES.getRes(name);</span><br><span class="line">        result.texture = texture;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述文件加载成功，开始播放动画</span></span><br><span class="line"><span class="comment">     * Description file loading is successful, start to play the animation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private startAnimation(result: string[]) &#123;</span><br><span class="line">        <span class="keyword">let</span> parser = <span class="keyword">new</span> egret.HtmlTextParser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> textflowArr = result.map(<span class="function"><span class="params">text</span> =&gt;</span> parser.parse(text));</span><br><span class="line">        <span class="keyword">let</span> textfield = <span class="keyword">this</span>.textfield;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">let</span> change = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count &gt;= textflowArr.length) &#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> textFlow = textflowArr[count];</span><br><span class="line">            <span class="comment">// 切换描述内容</span></span><br><span class="line">            <span class="comment">// Switch to described content</span></span><br><span class="line">            textfield.textFlow = textFlow;</span><br><span class="line">            <span class="keyword">let</span> tw = egret.Tween.get(textfield);</span><br><span class="line">            tw.to(&#123; <span class="string">"alpha"</span>: <span class="number">1</span> &#125;, <span class="number">200</span>);</span><br><span class="line">            tw.wait(<span class="number">2000</span>);</span><br><span class="line">            tw.to(&#123; <span class="string">"alpha"</span>: <span class="number">0</span> &#125;, <span class="number">200</span>);</span><br><span class="line">            tw.call(change, <span class="keyword">this</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        change();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源适配器（AssetAdapter .ts）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssetAdapter</span> <span class="title">implements</span> <span class="title">eui</span>.<span class="title">IAssetAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @language zh_CN</span></span><br><span class="line"><span class="comment">     * 解析素材</span></span><br><span class="line"><span class="comment">     * @param source 待解析的新素材标识符</span></span><br><span class="line"><span class="comment">     * @param compFunc 解析完成回调函数，示例：callBack(content:any,source:string):void;</span></span><br><span class="line"><span class="comment">     * @param thisObject callBack的 this 引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public getAsset(source: string, <span class="attr">compFunc</span>:<span class="built_in">Function</span>, <span class="attr">thisObject</span>: any): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onGetRes</span>(<span class="params">data: any</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">            compFunc.call(thisObject, data, source);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (RES.hasRes(source)) &#123;</span><br><span class="line">            <span class="keyword">let</span> data = RES.getRes(source);</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                onGetRes(data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                RES.getResAsync(source, onGetRes, <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            RES.getResByUrl(source, onGetRes, <span class="keyword">this</span>, RES.ResourceItem.TYPE_IMAGE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主题适配器（ThemeAdapter.ts）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeAdapter</span> <span class="title">implements</span> <span class="title">eui</span>.<span class="title">IThemeAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析主题</span></span><br><span class="line"><span class="comment">     * @param url 待解析的主题url</span></span><br><span class="line"><span class="comment">     * @param onSuccess 解析完成回调函数，示例：compFunc(e:egret.Event):void;</span></span><br><span class="line"><span class="comment">     * @param onError 解析失败回调函数，示例：errorFunc():void;</span></span><br><span class="line"><span class="comment">     * @param thisObject 回调的this引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public getTheme(url: string, <span class="attr">onSuccess</span>: <span class="built_in">Function</span>, <span class="attr">onError</span>: <span class="built_in">Function</span>, <span class="attr">thisObject</span>: any): <span class="keyword">void</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onResGet</span>(<span class="params">e: string</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">            onSuccess.call(thisObject, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onResError</span>(<span class="params">e: RES.ResourceEvent</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.resItem.url == url) &#123;</span><br><span class="line">                RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, onResError, <span class="literal">null</span>);</span><br><span class="line">                onError.call(thisObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> generateEUI !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            egret.callLater(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                onSuccess.call(thisObject, generateEUI);</span><br><span class="line">            &#125;, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, onResError, <span class="literal">null</span>);</span><br><span class="line">            RES.getResByUrl(url, onResGet, <span class="keyword">this</span>, RES.ResourceItem.TYPE_TEXT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">var</span> generateEUI: &#123; <span class="attr">paths</span>: string[], <span class="attr">skins</span>: any &#125;</span><br></pre></td></tr></table></figure><p>关于js的异步，依然使用了es7的async与await，用法自行脑补</p><h2 id="关于三方库引入"><a href="#关于三方库引入" class="headerlink" title="关于三方库引入"></a><strong>关于三方库引入</strong></h2><p><strong>打开egretProperties.json</strong></p><p>按照已有的格式以相同的写法将你的三方库路径添加上去，然后在终端执行egret build -e命令</p><p>以引入socket.io为例：</p><p>开发根目录：D:\dev\live-psz</p><p>socket.io目录：D:\dev\socket-libsrc</p><p><img src="https://oscimg.oschina.net/oscnet/f2c9d1c6ea1e092ef5c386f90054a9e41e3.jpg" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"socket.io"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"../socket-libsrc/bin/socket.io"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于exml主题UI布局"><a href="#关于exml主题UI布局" class="headerlink" title="关于exml主题UI布局"></a><strong>关于exml主题UI布局</strong></h2><p>在resource目录下新建eui_skins文件夹，在下面新建**.exml文件，然后进行布局，</p><p>在default.thm.json确保引入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"skins"</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">"autoGenerateExmlsList"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"exmls"</span>: [</span><br><span class="line"><span class="string">"resource/eui_skins/Animation.exml"</span>,</span><br><span class="line"><span class="string">"resource/eui_skins/AniShowCName.exml"</span>,</span><br><span class="line"><span class="string">"resource/eui_skins/GameUi.exml"</span>,</span><br><span class="line"><span class="string">"resource/eui_skins/RoleDetailUi.exml"</span>,</span><br><span class="line"><span class="string">"resource/eui_skins/RoleUi.exml"</span>,</span><br><span class="line"><span class="string">"resource/eui_skins/test.exml"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"path"</span>: <span class="string">"resource/default.thm.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在src下面新建对应的ts文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameUi</span> <span class="keyword">extends</span> <span class="title">eui</span>.<span class="title">Component</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.skinName = <span class="string">"resource/eui_skins/GameUi.exml"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在布局里面命名了相对应的Id，那么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public gold_group_btn :eui.Group;</span><br><span class="line">public roleContainer: eui.Group;</span><br></pre></td></tr></table></figure><p><strong>如何引用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gameui:GameUi = <span class="keyword">new</span> GameUi();</span><br><span class="line"><span class="keyword">this</span>.stage.addChild(gameui)</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h2><p>其他涉及到的API可以查看官网文档，如有错误，望斧正，如有疑问，请留言，我会及时回复。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载安装：&quot;&gt;&lt;a href=&quot;#下载安装：&quot; class=&quot;headerlink&quot; title=&quot;下载安装：&quot;&gt;&lt;/a&gt;&lt;strong&gt;下载安装：&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1、EgretLauncher&quot;&gt;&lt;a href=&quot;#1、EgretLauncher&quot; class=&quot;headerlink&quot; title=&quot;1、EgretLauncher&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、EgretLauncher&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;传送门：&lt;a href=&quot;https://egret.com/downloads/engine.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://egret.com/downloads/engine.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载完成按照要求一步步安装就可以了。&lt;/p&gt;
&lt;p&gt;引擎管理工具，包括版本管理，项目打包，项目创建，其他工具下载安装等。&lt;/p&gt;
&lt;h3 id=&quot;2、Egret-Wing&quot;&gt;&lt;a href=&quot;#2、Egret-Wing&quot; class=&quot;headerlink&quot; title=&quot;2、Egret Wing&quot;&gt;&lt;/a&gt;&lt;strong&gt;2、Egret Wing&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;打开EgretLauncher引擎管理工具，下载安装egret wing，（这里需要账号密码登录，如果没有就去注册一个吧！&lt;/p&gt;
&lt;p&gt;egret wing支持可视化创建、编辑和管理项目 EUI，以及 TS 代码编写和断点调试。&lt;/p&gt;
    
    </summary>
    
      <category term="技术栈" scheme="https://www.wxqdoit.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>laya核心API五分钟速记</title>
    <link href="https://www.wxqdoit.com/20180721/laya-api/"/>
    <id>https://www.wxqdoit.com/20180721/laya-api/</id>
    <published>2018-07-21T08:35:10.000Z</published>
    <updated>2019-02-15T17:20:45.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Node-节点-操作"><a href="#Node-节点-操作" class="headerlink" title="Node(节点)操作"></a>Node(节点)操作</h2><h3 id="大部分的laya-UI组件都可以看做节点，可以看做web开发中，使用JavaScript对html节点进行操作。"><a href="#大部分的laya-UI组件都可以看做节点，可以看做web开发中，使用JavaScript对html节点进行操作。" class="headerlink" title="大部分的laya UI组件都可以看做节点，可以看做web开发中，使用JavaScript对html节点进行操作。"></a>大部分的laya UI组件都可以看做节点，可以看做web开发中，使用JavaScript对html节点进行操作。</h3><p><strong>添加节点核心方法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加子节点。</span></span><br><span class="line"><span class="comment"> * @paramnode 节点对象</span></span><br><span class="line"><span class="comment"> * @return返回添加的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">addChild(node: Node): Node;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量增加子节点</span></span><br><span class="line"><span class="comment"> * @param...args 无数子节点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">addChildren(...args: any[]): <span class="keyword">void</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加子节点到指定的索引位置。</span></span><br><span class="line"><span class="comment"> * @paramnode 节点对象。</span></span><br><span class="line"><span class="comment"> * @paramindex 索引位置。</span></span><br><span class="line"><span class="comment"> * @return返回添加的节点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">addChildAt(node: Node, <span class="attr">index</span>: number): Node;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据子节点对象，获取子节点的索引位置。</span></span><br><span class="line"><span class="comment"> * @paramnode 子节点。</span></span><br><span class="line"><span class="comment"> * @return子节点所在的索引位置。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>注意：添加节点时候，越后添加的层级越高，可以设置zOrder属性调整对象层级。</p><a id="more"></a><p><strong>销毁、删除节点核心方法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除子节点。</span></span><br><span class="line"><span class="comment"> * @paramnode 子节点</span></span><br><span class="line"><span class="comment"> * @return被删除的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">removeChild(node: Node): Node;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从父容器删除自己，如已经被删除不会抛出异常。</span></span><br><span class="line"><span class="comment"> * @return 当前节点（ Node ）对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">removeSelf(): Node;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据子节点名字删除对应的子节点对象，如果找不到不会抛出异常。</span></span><br><span class="line"><span class="comment"> * @paramname 对象名字。</span></span><br><span class="line"><span class="comment"> * @return 查找到的节点（ Node ）对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">removeChildByName(name: string): Node;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据子节点索引位置，删除对应的子节点对象。</span></span><br><span class="line"><span class="comment"> * @paramindex 节点索引位置。</span></span><br><span class="line"><span class="comment"> * @return被删除的节点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">removeChildAt(index: number): Node;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除指定索引区间的所有子对象。</span></span><br><span class="line"><span class="comment"> * @parambeginIndex 开始索引。</span></span><br><span class="line"><span class="comment"> * @paramendIndex 结束索引。</span></span><br><span class="line"><span class="comment"> * @return 当前节点对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">removeChildren(beginIndex?: number, endIndex?: number): Node;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * @param destroyChild（可选）是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">destroy(destroyChild?: boolean): <span class="keyword">void</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销毁所有子对象，不销毁自己本身。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">destroyChildren(): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure><p>注意：如果将节点销毁，则不能再使用，但删除之后的节点依旧可以使用。</p><p><strong>获取节点核心方法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据子节点对象，获取子节点的索引位置。</span></span><br><span class="line"><span class="comment"> * @paramnode 子节点。</span></span><br><span class="line"><span class="comment"> * @return子节点所在的索引位置。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getChildIndex(node: Node): number;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据子节点的名字，获取子节点对象。</span></span><br><span class="line"><span class="comment"> * @paramname 子节点的名字。</span></span><br><span class="line"><span class="comment"> * @return节点对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getChildByName(name: string): Node;</span><br></pre></td></tr></table></figure><p>注意：getChildByName方法传入的name，是在创建的时候为节点设置的name，并且只能获取下一级的孩子节点，而不是所有属于当前节点的所有子节点。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件类型非常多，常用的有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 定义 mousedown 事件对象的 type 属性值。*/</span></span><br><span class="line"><span class="keyword">static</span> MOUSE_DOWN: string;</span><br><span class="line"><span class="comment">/** 定义 mouseup 事件对象的 type 属性值。*/</span></span><br><span class="line"><span class="keyword">static</span> MOUSE_UP: string;</span><br><span class="line"><span class="comment">/** 定义 click 事件对象的 type 属性值。*/</span></span><br><span class="line"><span class="keyword">static</span> CLICK: string;</span><br><span class="line"><span class="comment">/** 定义 rightmousedown 事件对象的 type 属性值。*/</span></span><br><span class="line"><span class="keyword">static</span> RIGHT_MOUSE_DOWN: string;</span><br><span class="line"><span class="comment">/** 定义 rightmouseup 事件对象的 type 属性值。*/</span></span><br><span class="line"><span class="keyword">static</span> RIGHT_MOUSE_UP: string;</span><br><span class="line"><span class="comment">/** 定义 rightclick 事件对象的 type 属性值。*/</span></span><br><span class="line"><span class="keyword">static</span> RIGHT_CLICK: string;</span><br><span class="line"><span class="comment">/** 定义 mousemove 事件对象的 type 属性值。*/</span></span><br><span class="line"><span class="keyword">static</span> MOUSE_MOVE: string;</span><br><span class="line"><span class="comment">/** 定义 mouseover 事件对象的 type 属性值。*/</span></span><br><span class="line"><span class="keyword">static</span> MOUSE_OVER: string;</span><br></pre></td></tr></table></figure><p>具体可以查看layaAir.d.ts laya.events模块，大概在17316行…….</p><p><strong>事件绑定：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;增加事件侦听器，以使侦听器能够接收事件通知。&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * @paramtype事件的类型。</span></span><br><span class="line"><span class="comment"> * @paramcaller事件侦听函数的执行域。</span></span><br><span class="line"><span class="comment"> * @paramlistener事件侦听函数。</span></span><br><span class="line"><span class="comment"> * @paramargs（可选）事件侦听函数的回调参数。</span></span><br><span class="line"><span class="comment"> * @return 此 EventDispatcher 对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">on(type: string, <span class="attr">caller</span>: any, <span class="attr">listener</span>: <span class="built_in">Function</span>, args?: <span class="built_in">Array</span>&lt;any&gt;): EventDispatcher;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * @paramtype事件的类型。</span></span><br><span class="line"><span class="comment"> * @paramcaller事件侦听函数的执行域。</span></span><br><span class="line"><span class="comment"> * @paramlistener事件侦听函数。</span></span><br><span class="line"><span class="comment"> * @paramargs（可选）事件侦听函数的回调参数。</span></span><br><span class="line"><span class="comment"> * @return 此 EventDispatcher 对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">once(type: string, <span class="attr">caller</span>: any, <span class="attr">listener</span>: <span class="built_in">Function</span>, args?: <span class="built_in">Array</span>&lt;any&gt;): EventDispatcher;</span><br></pre></td></tr></table></figure><p>注意：多次为同一个节点使用on方法会多次绑定事件，需要了解的是，如果对节点的操作不会有变化，则使用on方法绑定一次即可，如果根据状态条件等因素的不同，则使用once绑定。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>网络请求也是封装的HttpRequest，比较简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送 HTTP 请求。</span></span><br><span class="line"><span class="comment"> * @paramurl请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。</span></span><br><span class="line"><span class="comment"> * @paramdata(default = null)发送的数据。</span></span><br><span class="line"><span class="comment"> * @parammethod(default = "get")用于请求的 HTTP 方法。值包括 "get"、"post"、"head"。</span></span><br><span class="line"><span class="comment"> * @paramresponseType(default = "text")Web 服务器的响应类型，可设置为 "text"、"json"、"xml"、"arraybuffer"。</span></span><br><span class="line"><span class="comment"> * @paramheaders(default = null) HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如["Content-Type", "application/json"]。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">send(url: string, data?: any, method?: string, responseType?: string, headers?: <span class="built_in">Array</span>&lt;any&gt;): <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure><p>一个简单的请求网络数据示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">getList(page,size,url)&#123;</span><br><span class="line">        <span class="keyword">let</span> http = <span class="keyword">new</span> Laya.HttpRequest();</span><br><span class="line">        http.send(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.gd.host&#125;</span><span class="subst">$&#123;url&#125;</span>?userId=<span class="subst">$&#123;<span class="keyword">this</span>.gd.user.id&#125;</span>&amp;page=<span class="subst">$&#123;page&#125;</span>&amp;size=<span class="subst">$&#123;size&#125;</span>`</span>, <span class="string">'GET'</span>);</span><br><span class="line">        http.timeout = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            http.once(Laya.Event.COMPLETE, <span class="keyword">this</span>, (resp) =&gt; &#123;</span><br><span class="line">                resp = <span class="built_in">JSON</span>.parse(resp);</span><br><span class="line">                <span class="keyword">if</span> (resp.meta.code === <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resp.data !== <span class="literal">null</span>) &#123;</span><br><span class="line">                        resolve(resp.data)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(resp.data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'服务器错误'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            http.once(Laya.Event.ERROR, <span class="keyword">this</span>, (resp) =&gt; &#123;</span><br><span class="line">                resolve(resp.data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="keyword">await</span> EventUtils.getInstance().getList(<span class="keyword">this</span>.currentPage, <span class="keyword">this</span>.size,<span class="string">'/norain/pre/rank/time'</span>);<span class="comment">//请求加载数据</span></span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p><strong>缓动动画</strong></p><p>缓动类型解释传送门：<a href="https://layaair.ldc.layabox.com/api/?category=Core&amp;class=laya.utils.Ease" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/api/?category=Core&amp;class=laya.utils.Ease</a></p><p>缓动动画演示传送门：<a href="https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Tween&amp;name=EaseFunctionsDemo" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Tween&amp;name=EaseFunctionsDemo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Node-节点-操作&quot;&gt;&lt;a href=&quot;#Node-节点-操作&quot; class=&quot;headerlink&quot; title=&quot;Node(节点)操作&quot;&gt;&lt;/a&gt;Node(节点)操作&lt;/h2&gt;&lt;h3 id=&quot;大部分的laya-UI组件都可以看做节点，可以看做web开发中，使用JavaScript对html节点进行操作。&quot;&gt;&lt;a href=&quot;#大部分的laya-UI组件都可以看做节点，可以看做web开发中，使用JavaScript对html节点进行操作。&quot; class=&quot;headerlink&quot; title=&quot;大部分的laya UI组件都可以看做节点，可以看做web开发中，使用JavaScript对html节点进行操作。&quot;&gt;&lt;/a&gt;大部分的laya UI组件都可以看做节点，可以看做web开发中，使用JavaScript对html节点进行操作。&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;添加节点核心方法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 添加子节点。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param	node 节点对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @return	返回添加的节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addChild(node: Node): Node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 批量增加子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param	...args 无数子节点。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addChildren(...args: any[]): &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 添加子节点到指定的索引位置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param	node 节点对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param	index 索引位置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @return	返回添加的节点。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addChildAt(node: Node, &lt;span class=&quot;attr&quot;&gt;index&lt;/span&gt;: number): Node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 根据子节点对象，获取子节点的索引位置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param	node 子节点。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @return	子节点所在的索引位置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：添加节点时候，越后添加的层级越高，可以设置zOrder属性调整对象层级。&lt;/p&gt;
    
    </summary>
    
      <category term="技术栈" scheme="https://www.wxqdoit.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>laya入门，这一篇应该够了</title>
    <link href="https://www.wxqdoit.com/20180712/laya/"/>
    <id>https://www.wxqdoit.com/20180712/laya/</id>
    <published>2018-07-12T14:33:54.000Z</published>
    <updated>2019-02-15T17:20:46.089Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>LayaAir 是基于HTML5开源引擎，所开发的游戏既可以网页运行，也可以打包Android &amp; ios app运行，目前更到1.7.19.1 beta版本，本次使用1.7.18稳定版。 本文介绍laya的下载安装，项目创建，目录结构，环境配置与es6+的支持，及具体开发知识，网页端发布等等方面。</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>官网传送门：<a href="https://www.layabox.com/" target="_blank" rel="noopener">www.layabox.com</a></p><p>进入首页看到如下两个下载按钮：</p><p><img src="https://oscimg.oschina.net/oscnet/b3a96baefdfcb769457262214b77dd36a99.jpg" alt=""></p><p>此刻就让人有点懵逼了，layaAir Engine可以理解为引擎内核（源码），IDE就是集成开发工具了，直接下载IDE就好，因为下载下来的已经集成对应版本的源码包了（你会发现，每一个版本的源码都有对应版本的IDE。截止目前更到1.7.19.1 beta版本，为了稳定还是使用1.7.18版本。如下（对，你没看错，蓝色那个，点…点…点它：</p><a id="more"></a><p><img src="https://oscimg.oschina.net/oscnet/67d6697f96c54a1957f107e1b566229da03.jpg" alt=""></p><p>下载完成之后是一个zip压缩包，不用安装的，直接解压到你想放的位置，完事儿之后就可以使用了：</p><p><img src="https://oscimg.oschina.net/oscnet/8ad3ab28ea1113f1f137dd294028247f23a.jpg" alt=""></p><p><img src="https://oscimg.oschina.net/oscnet/67450942b0e47481e558ea5156ed9b0360b.jpg" alt=""></p><p>就是他了（.exe文件，双击吧，看到如下界面你就完成第一步了！</p><p><img src="https://oscimg.oschina.net/oscnet/ff2169a74eda4dda07d6b2204282f47af42.jpg" alt=""></p><h2 id="项目创建与目录结构"><a href="#项目创建与目录结构" class="headerlink" title="项目创建与目录结构"></a>项目创建与目录结构</h2><p>点击新建项目，弹出如下框：</p><p><img src="https://oscimg.oschina.net/oscnet/0c71eaf1f8fae82622426e5da4cdf4464d2.jpg" alt=""></p><p>选择默认的UI示例项目，类型选择JavaScript项目，如果你会as或者ts也可以选它，然后点击创建，创建完成进入代码模式，简单标注了一下：</p><p><img src="https://oscimg.oschina.net/oscnet/aa8fc8c9d224438c8ce0a3be8818f34739a.jpg" alt=""></p><p>接下来什么将调试器选择chrome调试，点击三角按钮或者按f5运行，你会看到如下一个巨丑的页面弹出来emmmm（真的很丑，但是只要正常看到，这一步就算完成了）。</p><p><img src="https://oscimg.oschina.net/oscnet/c85b911f5969a178b1f73d6dda459458138.jpg" alt=""></p><p>接下来是目录结构，传送门：<a href="https://ldc.layabox.com/doc/?nav=zh-js-1-0-0" target="_blank" rel="noopener">https://ldc.layabox.com/doc/?nav=zh-js-1-0-0</a>，不过这个里面说的hin多hin杂，在这里简单说重点：</p><p><strong>项目运行配置文件（.laya文件夹）。</strong></p><ol><li>launch.json，当你将项目移动或拷贝到别处的时候需要修改，什么路径统统要改。</li><li>如果你用chrome运行项目，会有一个chrome文件夹，不用管他，垃圾东西。</li></ol><p><strong>项目的输出目录（bin文件夹）。</strong>项目编译后的东西都在里面，什么动画，图集，你的源码等等，最后项目发布也是从这个目录发布</p><ol><li>lib，全是引擎的源码包，不用的可以删除</li><li>res，资源文件，图片图集，音频文件都可以在里面</li><li>index.html，点进去看看，里面说的很清楚了</li></ol><p><strong>UI项目目录（laya）。</strong>其实这些都看自己的喜好，没有规定的话，只要合理爱咋咋地吧。</p><ol><li><p>laya/assets目录用来存放UI页面、粒子等组件所需的图片资源。</p></li><li><p>laya/pages目录用来存放LayaAirIDE创建页面布局生成的文件。</p></li></ol><p><strong>代码提供文件目录（libs），不用管他。</strong></p><p><strong>项目代码目录（src）。</strong></p><pre><code>这个就比较牛逼了，全是你的代码，不过后面我们不在里面开发。</code></pre><p>目录结构也介绍完了，这一节大概就是这些，下一节讲解配置我们真正的而开发环境。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>既然是属于h5前端开发，自然要配置一系列的工具。webpack，babel，gulp等等。（如果大家不想使用这些工具，直接用项目默认的开发模式也可以，前面也足够了）</p><ul><li>安装Node.js，推荐稳定版本8.x吧（不会问度娘。</li><li>在项目根目录新建文件夹www（其实开发文件夹应该叫做src的，无奈被默认的目录占用了，src这个文件夹不能动他，因为构建的ui文件类会在里面，稍后我们输出webpack的main.js也会放在里面。然后项目编译时会用到src）。</li><li>接下来切换到下方的终端（没有看到的话f5一下吧），用npm安装如下一堆依赖的东西（你可以直接建一个package.json文件，将下面的考进去，然后npm install，谢谢赶紧我~~）。完了之后www会有一个node_modules文件夹，全是刚才装的b：</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack-demo&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;webpack&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;wxq&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^7.1.2&quot;,</span><br><span class="line">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.23.0&quot;,</span><br><span class="line">    &quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,</span><br><span class="line">    &quot;dateformat&quot;: &quot;^3.0.3&quot;,</span><br><span class="line">    &quot;gulp&quot;: &quot;^3.9.1&quot;,</span><br><span class="line">    &quot;gulp-babel&quot;: &quot;^7.0.1&quot;,</span><br><span class="line">    &quot;gulp-less&quot;: &quot;^3.4.0&quot;,</span><br><span class="line">    &quot;gulp-util&quot;: &quot;^3.0.8&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^3.10.0&quot;,</span><br><span class="line">    &quot;webpack-stream&quot;: &quot;^4.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>创建.babelrc文件，里面是babel的预设集配置等，如果你不想懂，可以直接copy进去：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;env&quot;],</span><br><span class="line">  &quot;plugins&quot;: [[</span><br><span class="line">    &quot;transform-runtime&quot;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;helpers&quot;: false,</span><br><span class="line">      &quot;polyfill&quot;: false,</span><br><span class="line">      &quot;regenerator&quot;: true,</span><br><span class="line">      &quot;moduleName&quot;: &quot;babel-runtime&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>创建webpack.config.js文件，这个是webpack的配置文件，主要配置webpack打包的入口文件口和输出文件，之后会时候gulp的自动任务执行webpack打包，同时会将es6（es7、es8）通过bable转译为es5。</p></li><li><p>创建gulpfile.js文件，这个是gulp的配置文件，如果你不想懂，也可以直接copy进去：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="comment">//转译JavaScript</span></span><br><span class="line">gulp.task(<span class="string">"webpack"</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack-stream"</span>);</span><br><span class="line">    <span class="keyword">const</span>  config = <span class="built_in">require</span>(<span class="string">"./webpack.config"</span>);</span><br><span class="line">    gulp.src(<span class="string">"./src/**/*.js"</span>)</span><br><span class="line">        .pipe(webpack(config))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"../src/"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"watch"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">"./src/**/*.js"</span>,[<span class="string">'webpack'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"default"</span>,[<span class="string">"webpack"</span>,<span class="string">'watch'</span>]);</span><br></pre></td></tr></table></figure></li></ul><pre><code>解释一下吧，引入依赖gulp，创建三个任务，第一个是打包任务，webpack执行，第二个是watch任务监听文件变化自动执行第一个任务，这样就不需要每次修改文件都去执行gulp命令了，美滋滋~~，第三个默认任务，就是去执行上面两个咯。</code></pre><ul><li>执行npm install gulp -g 安装gulp到全局（必须安装到全局 全局 -g），不然会报错。<img src="https://oscimg.oschina.net/oscnet/1b7ec6c6f7d2016a2a65f79666390ec237b.jpg" alt=""></li></ul><p> 上述步骤完成且没有问题之后，成功之后再去执行gulp命令吧，如图我将www下面的src文件夹下面的所有东西都打包到了根目录下的src文件夹的mian.js文件里面:</p><p><img src="https://oscimg.oschina.net/oscnet/442733b35e207b3356cf10b877437fa1999.jpg" alt=""></p><p><img src="https://oscimg.oschina.net/oscnet/d4f548106f7dfae27847c4905c739e54b9b.jpg" alt=""></p><p>然后打开你的www–&gt;src–&gt;main.js：</p><p><img src="https://oscimg.oschina.net/oscnet/379b2763d337e38c5117164226775473490.jpg" alt=""></p><p>就长这样啦，然后去把index.html里面的代码改改吧，噢啦，环境搭建完成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--IDE生成的UI文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../src/ui/layaUI.max.all.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsfile--startTag--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../src/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsfile--endTag--&gt;</span></span><br></pre></td></tr></table></figure><p>如果到这里，你没有如遇到什么难题，那我们就可以准备进入正题了，emmmm。</p><h1 id="开发入门"><a href="#开发入门" class="headerlink" title="开发入门"></a>开发入门</h1><h2 id="舞台搭建与适配"><a href="#舞台搭建与适配" class="headerlink" title="舞台搭建与适配"></a>舞台搭建与适配</h2><p>开发目录下新建的main.js文件全部代码删除，然后不用管它，接下来：</p><p>GameMain.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">GameMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> init() &#123;</span><br><span class="line">        Laya.MiniAdpter.init();</span><br><span class="line">        Laya.init(<span class="number">768</span>, <span class="number">1366</span>, Laya.WebGL);</span><br><span class="line">        Laya.stage.bgColor = <span class="string">"#5a7b9a"</span>;</span><br><span class="line">        <span class="comment">//水平对齐方式，水平居中</span></span><br><span class="line">        Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;</span><br><span class="line">        <span class="comment">//垂直对齐方式，垂直居中</span></span><br><span class="line">        Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;</span><br><span class="line">        <span class="comment">//按照宽度</span></span><br><span class="line">        Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL;</span><br><span class="line">        <span class="comment">//屏幕适配，横屏还是竖屏，默认不改变</span></span><br><span class="line">        Laya.stage.screenMode = Laya.Stage.SCREEN_NONE;</span><br><span class="line">        <span class="comment">//禁用多点触控</span></span><br><span class="line">        Laya.MouseManager.multiTouchEnabled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果es6不懂的可以先去补一下，创建一个静态的方法init()。</p><p>Laya.MiniAdpter.init();//如果不考虑微信小游戏可以不加，当然加上也不会怎样。</p><p>Laya.init(768, 1366, Laya.WebGL);//初始化舞台大小，记住这个尺寸是设计大佬给的，她们的图都按照这个尺寸来做的。宽、高、渲染方式。</p><p>Laya.stage.bgColor = “#5a7b9a”;//这个舞台背景，爱咋咋地吧。</p><p>接下来的全是做是配的，copy贴上去就对了。还有其他的适配方式，以及参数，自己去官网看吧，反正我怎么不用。</p><h2 id="关于图集打包与资源加载策略"><a href="#关于图集打包与资源加载策略" class="headerlink" title="关于图集打包与资源加载策略"></a>关于图集打包与资源加载策略</h2><p>在进入main文件之前讲一讲这两点：图集打包与资源加载。</p><p><strong>图集打包：</strong></p><p>进入编辑模式，你懂我意思吧：</p><p><img src="https://oscimg.oschina.net/oscnet/c72b495c1733c22903694ec15774cfc70d6.jpg" alt=""></p><p>看图的时候不要问我拿来那么多文件，看重点：在这个界面，当你按下f12的时候，会发布代码，并将红色框里的文件夹里面的图片，按分文夹的方式打包成图集，这些文件就是在www/laya/assets下面，发布完成之后，你在bin/res/atlas下面看到图集的.png与.atlas（json）文件，这两个文件都是一一对应的。</p><p>注意：在编辑模式按f9可以进行设置，包括图集的大小，当然，这里主要也是设置图集大小。</p><p>这图集打包就这样咯，接下来是资源加载↓↓↓↓↓</p><p><strong>资源加载：</strong></p><p>关于资源加载如果做过游戏都知道，有一个载入界面，载入界面用到的所有资源最好是放在游戏包里面，进行第一次加载。第一次加载完成之后就是加载游戏需要的其它大部分资源，这里面的资源有可能是在本地，也有可能加载网络资源，一般需要写一个资源加载类。</p><p>简单介绍laya里面的资源加载类该如何写：</p><p>主要使用Laya.loader.load()方法进行加载，该方法有三个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Laya.loader.load(<span class="keyword">this</span>.resources, Laya.Handler.create(<span class="keyword">this</span>, loaded), Laya.Handler.create(<span class="keyword">this</span>, loading, <span class="literal">null</span>, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><p><em>第一个</em>，资源，如果单个加载，可以写字符串路径，如果批量加载，写成数组对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = [</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">"res/atlas/start.atlas"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">"res/atlas/activity.atlas"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">"res/atlas/popup.atlas"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">"res/atlas/comp.atlas"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">"res/atlas/part.atlas"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">"res/atlas/shareMask.atlas"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">"res/atlas/common.atlas"</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">     url: <span class="string">"res/sound/btn_click.mp3"</span>,</span><br><span class="line">     name: <span class="string">"btn_click"</span>,</span><br><span class="line">     type: Laya.Loader.SOUND</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">     url: <span class="string">"res/sound/btnShowSound.mp3"</span>,</span><br><span class="line">     name: <span class="string">"btnShowSound"</span>,</span><br><span class="line">     type: Laya.Loader.SOUND</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>name可以作为名字调用资源，如果不写，用的时候只能通过字符串路径调用资源；</p><p>type是资源类型，也可以不写，但最好写上</p><p><em>第二个</em>：加载完成的回调，只返回true或者false，</p><p><em>第三个</em>：加载过程的回调，返回的是数字，从0-100。</p><p>上一下完整的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;GameMain&#125; <span class="keyword">from</span> <span class="string">'./base/GameMain.js'</span></span><br><span class="line"><span class="keyword">import</span> &#123;ResLoader&#125; <span class="keyword">from</span> <span class="string">'./utils/ResLoader.js'</span></span><br><span class="line"><span class="keyword">import</span> &#123;MainBoard&#125; <span class="keyword">from</span> <span class="string">"./base/MainBoard"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;UserUtils&#125; <span class="keyword">from</span> <span class="string">"./utils/UserUtils"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;GlobalData&#125; <span class="keyword">from</span> <span class="string">"./base/GlobalData"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;GameEvent&#125; <span class="keyword">from</span> <span class="string">"./utils/GameEvent"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;LayoutUtils&#125; <span class="keyword">from</span> <span class="string">"./utils/LayoutUtils"</span>;</span><br><span class="line"></span><br><span class="line">GameMain.init();</span><br><span class="line">Laya.loader.load(<span class="string">"res/atlas/loading.atlas"</span>, Laya.Handler.create(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resManager = ResLoader.getInstance();</span><br><span class="line">    <span class="keyword">let</span> loading = <span class="keyword">new</span> ui.view.gameLoadingUI();</span><br><span class="line">    Laya.stage.addChild(loading);</span><br><span class="line">    <span class="keyword">let</span> sp_mask = loading.sp_mask;</span><br><span class="line">    sp_mask.optimizeScrollRect = <span class="literal">true</span>;</span><br><span class="line">    resManager.loaded(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> mainBoard = MainBoard.getInstance();</span><br><span class="line">        <span class="keyword">let</span> user = UserUtils.getInstance();</span><br><span class="line">        user.getWxUser(&#123;</span><br><span class="line">            sucFn: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'登陆成功v1.0.0'</span>);</span><br><span class="line">                Laya.stage.addChild(LayoutUtils.getInstance().map.get(<span class="string">"gameStartUI"</span>));</span><br><span class="line">                Laya.stage.removeChild(loading);</span><br><span class="line">                mainBoard.initMainBoard();</span><br><span class="line">                GameEvent.getInstance().bindListenEvent();</span><br><span class="line">                GameEvent.getInstance().remarkGameTime();  </span><br><span class="line">            &#125;, <span class="attr">errFn</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                alert(<span class="string">'登陆失败'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;, (e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> process = <span class="built_in">parseInt</span>(e * <span class="number">100</span>);</span><br><span class="line">        loading.progress_text.text = process + <span class="string">'%'</span>;</span><br><span class="line">        sp_mask.scrollRect = <span class="keyword">new</span> Laya.Rectangle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5.2</span> * process, <span class="number">24</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>resManager是我自己写的资源加载管理器，做统一资源管理，其实跟这加载一样，只是资源多，封装了一下。</p><p><strong>多说一句：单例模式</strong></p><p>因为这里基于es6的类，常常需要实例化类，像资源加载这种只需要实例化一次的就需要用到js的单例模式，具体实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ResLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">        <span class="keyword">return</span> ResLoader.instance ? ResLoader.instance : ResLoader.instance = <span class="keyword">new</span> ResLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UI创建</strong></p><p>如果你不想通过它的编辑器创建界面也是可以的，只不过全部用代码来实现比较麻烦，看看他的ui有哪些组件吧，传送门：<a href="https://layaair.ldc.layabox.com/api/?category=UI&amp;class=laya.ui.AsynDialog" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/api/?category=UI&amp;class=laya.ui.AsynDialog</a></p><p><img src="https://oscimg.oschina.net/oscnet/0efb0113ae091c482c8fe08601a1773f92d.jpg" alt=""></p><p>什么Image，Text，Button，Sprite全部自己写也很不爽。不过你可以试试用自己写代码的方式来进行游戏布局，比如我写的一些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">diyPopup(btnImgs) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = btnImgs.length;</span><br><span class="line">        <span class="keyword">let</span> btnArr=[];</span><br><span class="line">        <span class="keyword">let</span> popupUI = <span class="keyword">this</span>.map.get(<span class="string">'gamePopupUI'</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">          popupUI.removeChildByName(<span class="string">`btn<span class="subst">$&#123;i===<span class="number">0</span>?<span class="string">''</span>:i&#125;</span>`</span>)</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">if</span> (length === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> btn = <span class="keyword">new</span> Laya.Image().size(<span class="number">262</span>, <span class="number">116</span>).pos(<span class="number">250</span>, <span class="number">678</span>);</span><br><span class="line">            btn.skin = btnImgs[<span class="number">0</span>];</span><br><span class="line">            btn.name = <span class="string">'btn'</span>;</span><br><span class="line">            btnArr.push(btn);</span><br><span class="line">            popupUI.addChild(btn);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (length === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> btn1 = <span class="keyword">new</span> Laya.Image().size(<span class="number">262</span>, <span class="number">116</span>).pos(<span class="number">67</span>, <span class="number">678</span>);</span><br><span class="line">            btn1.name = <span class="string">'btn1'</span>;</span><br><span class="line">            btn1.skin = btnImgs[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">let</span> btn2 = <span class="keyword">new</span> Laya.Image().size(<span class="number">262</span>, <span class="number">116</span>).pos(<span class="number">443</span>, <span class="number">678</span>);</span><br><span class="line">            btn2.name = <span class="string">'btn2'</span>;</span><br><span class="line">            btn2.skin = btnImgs[<span class="number">1</span>];</span><br><span class="line">            btnArr.push(btn1,btn2);</span><br><span class="line">            popupUI.addChild(btn1);</span><br><span class="line">            popupUI.addChild(btn2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遮罩</span></span><br><span class="line">        popupUI.bg_wrap.graphics.clear();</span><br><span class="line">        popupUI.bg_wrap.graphics.drawRect(<span class="number">0</span>, <span class="number">0</span>, Laya.stage.width, Laya.stage.height, <span class="string">"#000000"</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">popupUI</span>:popupUI,<span class="attr">btnArr</span>:btnArr&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义</span></span><br><span class="line">    diyIcon(iconArr) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = iconArr.length;</span><br><span class="line">        <span class="keyword">let</span> mainUI = <span class="keyword">this</span>.map.get(<span class="string">'gameMainUI'</span>);</span><br><span class="line">        mainUI.icon_wrap.destroyChildren();</span><br><span class="line">        <span class="keyword">let</span> iconUI = [];</span><br><span class="line">        <span class="keyword">if</span> (length === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> icon = <span class="keyword">new</span> Laya.Image().size(<span class="number">77</span>, <span class="number">68</span>).pos(<span class="number">258</span>, <span class="number">0</span>);</span><br><span class="line">            icon.skin = iconArr[<span class="number">0</span>];</span><br><span class="line">            mainUI.icon_wrap.addChild(icon);</span><br><span class="line">            iconUI.push(icon)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (length === <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; length;i++)&#123;</span><br><span class="line">               <span class="keyword">let</span> icon = <span class="keyword">new</span> Laya.Image().size(<span class="number">77</span>, <span class="number">68</span>).pos(<span class="number">207</span>+i*(<span class="number">30</span>+<span class="number">77</span>), <span class="number">0</span>);</span><br><span class="line">               icon.skin = iconArr[i];</span><br><span class="line">               mainUI.icon_wrap.addChild(icon);</span><br><span class="line">               iconUI.push(icon)</span><br><span class="line">           &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; length;i++)&#123;</span><br><span class="line">                <span class="keyword">let</span> icon = <span class="keyword">new</span> Laya.Image().size(<span class="number">77</span>, <span class="number">68</span>).pos(<span class="number">169</span>+i*(<span class="number">15</span>+<span class="number">77</span>), <span class="number">0</span>);</span><br><span class="line">                icon.skin = iconArr[i];</span><br><span class="line">                mainUI.icon_wrap.addChild(icon);</span><br><span class="line">                iconUI.push(icon)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> iconUI;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还是用编辑器拖拖拉拉舒服，点击view新建页面/场景，最好把逻辑类勾，本人当时没有勾上，就全部发布到一个文件里面去了，下面会说的。然后直接往上怼：</p><p><img src="https://oscimg.oschina.net/oscnet/61aa6b4434d68be76cc53466e82694d38a7.jpg" alt=""></p><p>做完之后按f12发布，就会发布到src/ui下面的layaUI.max.all.js里面。</p><p>接下来在代码里面引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gameMain= <span class="keyword">new</span> ui.view.gameMainUI();</span><br><span class="line">Laya.stage.addChild(gameMain);<span class="comment">//添加到舞台，removeChild()你懂吧</span></span><br></pre></td></tr></table></figure><p>如此，页面场景也可以自己搭建好了。其实还有一部分是粒子和动画，但是我觉得这个可以看看官网给的教程（我司有做粒子和动画的，我不会），传送门：<a href="https://ldc.layabox.com/doc/?nav=zh-js-2-1-10" target="_blank" rel="noopener">https://ldc.layabox.com/doc/?nav=zh-js-2-1-10</a>。</p><p>这一入门部分也就告一段落，基本上可自己写出一个demo。下一篇准备讲讲使用laya的API以及其中遇到的巨坑。laya系列完了之后准备再写一个egret入门与坑的系列。如果有错误的地方，还请多多指教。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;LayaAir 是基于HTML5开源引擎，所开发的游戏既可以网页运行，也可以打包Android &amp;amp; ios app运行，目前更到1.7.19.1 beta版本，本次使用1.7.18稳定版。 本文介绍laya的下载安装，项目创建，目录结构，环境配置与es6+的支持，及具体开发知识，网页端发布等等方面。&lt;/p&gt;
&lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h2&gt;&lt;p&gt;官网传送门：&lt;a href=&quot;https://www.layabox.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.layabox.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进入首页看到如下两个下载按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/b3a96baefdfcb769457262214b77dd36a99.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此刻就让人有点懵逼了，layaAir Engine可以理解为引擎内核（源码），IDE就是集成开发工具了，直接下载IDE就好，因为下载下来的已经集成对应版本的源码包了（你会发现，每一个版本的源码都有对应版本的IDE。截止目前更到1.7.19.1 beta版本，为了稳定还是使用1.7.18版本。如下（对，你没看错，蓝色那个，点…点…点它：&lt;/p&gt;
    
    </summary>
    
      <category term="技术栈" scheme="https://www.wxqdoit.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>node+express使用multiparty实现文件上传</title>
    <link href="https://www.wxqdoit.com/20160520/node-express-fileupload/"/>
    <id>https://www.wxqdoit.com/20160520/node-express-fileupload/</id>
    <published>2016-05-20T08:22:00.000Z</published>
    <updated>2019-02-15T17:20:45.902Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>文件上传在一个项目中是相对于比较基础的功能，今天分享一下自己是如何在nodejs中使用中间件multiparty实现文件上传的。nodejs环境的搭建就不赘述了，直奔主题吧！</p><p>第一步：引入express等需要用到的模块express，jade等模块都需要自己手动使用npm命令在控制台安装，如npm install express。在这里用的是jade模板引擎。</p><p>（文件 demo.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);<span class="comment">//导入express模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);<span class="comment">//路径配置模块</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)<span class="comment">//页面传递参数解析</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);<span class="comment">//mysql模块</span></span><br><span class="line"><span class="keyword">var</span> multiparty = <span class="built_in">require</span>(<span class="string">'multiparty'</span>);<span class="comment">//文件上传模块</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express(); </span><br><span class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"views/pages/"</span>);<span class="comment">//设置视图文件路径</span></span><br><span class="line">app.set(<span class="string">"view engine"</span>,<span class="string">"jade"</span>);<span class="comment">//设置模板引擎</span></span><br><span class="line">app.use(express.static(path.join(__dirname,<span class="string">'bower_components'</span>)))<span class="comment">//设置静态文件路径</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>,&#125;))</span><br><span class="line">app.listen(port);<span class="comment">//监听端口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"start..."</span>+port);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'连接开始'</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/index"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">res.send(<span class="string">"hello"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后我们就可以在控制台启动服务 node demo，访问路径<a href="http://localhost:3000/index就可以看到结果了" target="_blank" rel="noopener">http://localhost:3000/index就可以看到结果了</a></p><p><img src="http://static.oschina.net/uploads/space/2016/0520/152414_pjim_2667208.png" alt=""></p><p><img src="http://static.oschina.net/uploads/space/2016/0520/152821_Um1y_2667208.png" alt=""></p><p>开始编写html代码(因为使用的jade模板引擎，所以按照jade语法编写)主要是表单提交，关于样式代码就不解释了。代码和浏览器效果如下，其中代码有几个地方要解释一下,enctype=”multipart/form-data”这一段代码必须要加上，用于表单里图片上传，action = “/demo”代表表单提交处理的路径。并把后台的get 请求代码附上</p><p>（文件demo.jade）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">div.con</span><br><span class="line">form.loginForm(method = &quot;post&quot;,enctype=&quot;multipart/form-data&quot; ,action = &apos;/demo&apos;)</span><br><span class="line">div.upload</span><br><span class="line">span 姓名:</span><br><span class="line">input.stuMsg.stu_name(type = &quot;text&quot;,name = &quot;name&quot;,placeholder = &quot;姓名&quot;)</span><br><span class="line">div.upload</span><br><span class="line">span 学号:</span><br><span class="line">input.stuMsg.stu_number(type = &quot;text&quot;,name = &quot;number&quot;,placeholder = &quot;学号&quot;)</span><br><span class="line">div.upload</span><br><span class="line">span 性别:</span><br><span class="line">input.stuMsg.stu_sex(type = &quot;text&quot;,name = &quot;sex&quot;,placeholder = &quot;性别&quot;)</span><br><span class="line">div.upload</span><br><span class="line">span 年龄:</span><br><span class="line">input.stuMsg.stu_age(type = &quot;text&quot;,name = &quot;age&quot;,placeholder = &quot;年龄&quot;)</span><br><span class="line">div.upload#containimg</span><br><span class="line">span 头像:</span><br><span class="line">input.stuMsg.stu_img(type = &quot;file&quot;,name = &quot;upfiles&quot;,multiple=&apos;mutiple&apos;)</span><br><span class="line">div.upload</span><br><span class="line">input.stuMsg.addmsg(type = &quot;submit&quot;,value = &quot;录入&quot;)</span><br></pre></td></tr></table></figure><p>（文件app.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">"/demo"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">res.render(<span class="string">'demo'</span>,&#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/space/2016/0520/154633_l6eP_2667208.png" alt=""></p><p>接着开始连接数据库，我使用的市mysql，同样需要引入模块。数据库里面的字段有id name number sex age img</p><p>（文件demo.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建连接数据库</span></span><br><span class="line"><span class="keyword">var</span> conn = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    database:<span class="string">'stu_manage_system'</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">&#125;);</span><br><span class="line">conn.connect();<span class="comment">//连接数据库</span></span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/space/2016/0520/155841_HEaG_2667208.png" alt=""><br>然后开始编写文件上传的核心代码：</p><p>（文件demo.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">"/demo"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> insertSQL = <span class="string">'insert into student values(0,?,?,?,?,?)'</span>;</span><br><span class="line"><span class="keyword">var</span> insertSQL_params = [];</span><br><span class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> multiparty.Form();<span class="comment">//实例一个multiparty</span></span><br><span class="line">    form.uploadDir = __dirname+<span class="string">"/bower_components/uploads/"</span>;<span class="comment">//设置文件储存路径</span></span><br><span class="line">    <span class="comment">//开始解析前台传过来的文件</span></span><br><span class="line">  form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> fields)&#123;</span><br><span class="line">  insertSQL_params.push(fields[item][<span class="number">0</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(fields[item][<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> filesTmp = <span class="built_in">JSON</span>.stringify(files);</span><br><span class="line">      <span class="keyword">var</span> pr = <span class="built_in">JSON</span>.parse(filesTmp)</span><br><span class="line">  <span class="built_in">console</span>.log(pr.upfiles.length)</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'parse error: '</span> + err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; pr.upfiles.length ; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> inputFile = files.upfiles[i];<span class="comment">//获取第一个文件</span></span><br><span class="line">        <span class="keyword">var</span> finalname = inputFile.originalFilename;</span><br><span class="line">        insertSQL_params.push(finalname)</span><br><span class="line">        <span class="keyword">var</span> new_name =__dirname+<span class="string">"/bower_components/uploads/"</span>+finalname;<span class="comment">//获取文件名</span></span><br><span class="line">        <span class="built_in">console</span>.log(new_name)</span><br><span class="line">        <span class="keyword">var</span> old_name = inputFile.path;<span class="comment">//获取文件路径</span></span><br><span class="line">        <span class="built_in">console</span>.log(old_name)</span><br><span class="line">fs.renameSync(old_name,new_name);            </span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//添加数据到数据库</span></span><br><span class="line">     conn.query(insertSQL,insertSQL_params, <span class="function"><span class="keyword">function</span> (<span class="params">err2, rows</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err2)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"成功"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">      res.send(<span class="string">"成功"</span>)   </span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中有些地方解释一下：</p><p>首先实例一个multiparty赋给form，</p><p>form.parse(req，callback)的回调函数三个参数，其中fields是一个对象，表示表单中非文件的数据</p><p><img src="http://static.oschina.net/uploads/space/2016/0520/160945_nB6I_2667208.png" alt=""></p><p>files参数也是一个对象，他包含了文件的所有信息</p><p><img src="http://static.oschina.net/uploads/space/2016/0520/161621_Qn6G_2667208.png" alt=""></p><p>JSON.parse用于从一个字符串中解析出json对象JSON.stringify则相反</p><p>通过originalFilename获取文件的原始名，最后将文件信息存到数据库。</p><p>demo.jsd的完整代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);<span class="comment">//导入express模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);<span class="comment">//路径配置模块</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)<span class="comment">//页面传递参数解析</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);<span class="comment">//mysql模块</span></span><br><span class="line"><span class="keyword">var</span> multiparty = <span class="built_in">require</span>(<span class="string">'multiparty'</span>);<span class="comment">//文件上传模块</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express(); </span><br><span class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"views"</span>,<span class="string">"views/pages/"</span>);<span class="comment">//设置视图文件路径</span></span><br><span class="line">app.set(<span class="string">"view engine"</span>,<span class="string">"jade"</span>);<span class="comment">//设置模板引擎</span></span><br><span class="line">app.use(express.static(path.join(__dirname,<span class="string">'bower_components'</span>)))<span class="comment">//设置静态文件路径</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>,&#125;))</span><br><span class="line">app.listen(port);<span class="comment">//监听端口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"start..."</span>+port);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'连接开始'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接数据库</span></span><br><span class="line"><span class="keyword">var</span> conn = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    database:<span class="string">'stu_manage_system'</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">&#125;);</span><br><span class="line">conn.connect();<span class="comment">//连接数据库 </span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/demo"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">res.render(<span class="string">'demo'</span>,&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">"/demo"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> insertSQL = <span class="string">'insert into student values(0,?,?,?,?,?)'</span>;</span><br><span class="line"><span class="keyword">var</span> insertSQL_params = [];</span><br><span class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> multiparty.Form();<span class="comment">//实例一个multiparty</span></span><br><span class="line">    form.uploadDir = __dirname+<span class="string">"/bower_components/uploads/"</span>;<span class="comment">//设置文件储存路径</span></span><br><span class="line">    <span class="comment">//开始解析前台传过来的文件</span></span><br><span class="line">  form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fields)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> fields)&#123;</span><br><span class="line">  insertSQL_params.push(fields[item][<span class="number">0</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(fields[item][<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(files)</span><br><span class="line">  <span class="keyword">var</span> filesTmp = <span class="built_in">JSON</span>.stringify(files);</span><br><span class="line">      <span class="keyword">var</span> pr = <span class="built_in">JSON</span>.parse(filesTmp)</span><br><span class="line">  <span class="built_in">console</span>.log(pr.upfiles.length)</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'parse error: '</span> + err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; pr.upfiles.length ; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> inputFile = files.upfiles[i];<span class="comment">//获取第一个文件</span></span><br><span class="line">        <span class="keyword">var</span> finalname = inputFile.originalFilename;</span><br><span class="line">        insertSQL_params.push(finalname)</span><br><span class="line">        <span class="keyword">var</span> new_name =__dirname+<span class="string">"/bower_components/uploads/"</span>+finalname;<span class="comment">//获取文件名</span></span><br><span class="line">        <span class="built_in">console</span>.log(new_name)</span><br><span class="line">        <span class="keyword">var</span> old_name = inputFile.path;<span class="comment">//获取文件路径</span></span><br><span class="line">        <span class="built_in">console</span>.log(old_name)</span><br><span class="line">fs.renameSync(old_name,new_name);            </span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//添加数据到数据库</span></span><br><span class="line">     conn.query(insertSQL,insertSQL_params, <span class="function"><span class="keyword">function</span> (<span class="params">err2, rows</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err2)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"成功"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">      res.send(<span class="string">"成功"</span>)   </span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如有错误、意见、建议，欢迎提出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件上传在一个项目中是相对于比较基础的功能，今天分享一下自己是如何在nodejs中使用中间件multiparty实现文件上传的。nodejs环境的搭建就不赘述了，直奔主题吧！&lt;/p&gt;
&lt;p&gt;第一步：引入express等需要用到的模块express，jade等模块都需要自己手动使用npm命令在控制台安装，如npm install express。在这里用的是jade模板引擎。&lt;/p&gt;
&lt;p&gt;（文件 demo.js）&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//导入express模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//路径配置模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bodyParser = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;body-parser&#39;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//页面传递参数解析&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mysql = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mysql&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//mysql模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; multiparty = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;multiparty&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//文件上传模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; util = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;util&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; port = &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//端口号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.set(&lt;span class=&quot;string&quot;&gt;&quot;views&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;views/pages/&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//设置视图文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.set(&lt;span class=&quot;string&quot;&gt;&quot;view engine&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;jade&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//设置模板引擎&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(express.static(path.join(__dirname,&lt;span class=&quot;string&quot;&gt;&#39;bower_components&#39;&lt;/span&gt;)))&lt;span class=&quot;comment&quot;&gt;//设置静态文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(bodyParser.urlencoded(&amp;#123;&lt;span class=&quot;attr&quot;&gt;extended&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.listen(port);&lt;span class=&quot;comment&quot;&gt;//监听端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;start...&quot;&lt;/span&gt;+port);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;连接开始&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&quot;/index&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req,res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	res.send(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术栈" scheme="https://www.wxqdoit.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>nodeJS创建简单学生管理系统</title>
    <link href="https://www.wxqdoit.com/20160310/node-student-sys/"/>
    <id>https://www.wxqdoit.com/20160310/node-student-sys/</id>
    <published>2016-03-10T14:50:13.000Z</published>
    <updated>2019-02-15T17:20:46.206Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安装并起一个服务：</p><pre><code>一：nodeJS下载安装。    1.nodeJS下载安装不再赘述，官网：https://nodejs.org</code></pre><p>2.npm安装模块语法：npm install _xxx_</p><pre><code>二：创建一个服务器，开启第一个应用。    用nodeJS的express框架创建一个服务器：    (以express框架为例子创建应用)express框架封装了http模块相比更加简洁,    首先要安装express模块 npm install express</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// app.js</span><br><span class="line">var express = require(&quot;express&quot;);//引入express模块</span><br><span class="line">var app = express();//将express()对象赋给app</span><br><span class="line">var port = 3000;//设置端口号</span><br><span class="line">app.get(&quot;/ &quot;,function (req,res) &#123;</span><br><span class="line">    res.send(&quot;hello world&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(port);//监听端口</span><br></pre></td></tr></table></figure><a id="more"></a><p>在正式开始之前先看看项目结构：</p><p><img src="http://static.oschina.net/uploads/space/2016/0310/221726_ldGD_2667208.png" alt=""></p><p>简单的介绍一下：前端主要使用bootstrap，jade模板，jQuery，ajax实现异步请求，由于前台页面文件较多，限于篇幅就不加上来了。后台逻辑也主要是对数据库的增删查改，对代码没有做任何的优化</p><p>直接上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line">//app.js</span><br><span class="line">var express = require(&quot;express&quot;);//导入express模块</span><br><span class="line">var path = require(&apos;path&apos;);//路径配置模块</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;)//页面传递参数解析</span><br><span class="line">var mysql = require(&apos;mysql&apos;);//mysql模块</span><br><span class="line">var multiparty = require(&apos;multiparty&apos;);//文件上传模块</span><br><span class="line">var util = require(&apos;util&apos;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var app = express(); </span><br><span class="line">var port = 3000;//端口号</span><br><span class="line"></span><br><span class="line">app.set(&quot;views&quot;,&quot;views/pages/&quot;);//设置视图文件路径</span><br><span class="line">app.set(&quot;view engine&quot;,&quot;jade&quot;);//设置模板引擎</span><br><span class="line">app.use(express.static(path.join(__dirname,&apos;bower_components&apos;)))//设置静态文件路径</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended: true,&#125;))</span><br><span class="line">app.listen(port);//监听端口</span><br><span class="line"></span><br><span class="line">console.log(&quot;start...&quot;+port);</span><br><span class="line">console.log(&apos;连接开始&apos;);</span><br><span class="line"></span><br><span class="line">//创建连接数据库</span><br><span class="line">var conn = mysql.createConnection(&#123;</span><br><span class="line">    host: &apos;localhost&apos;,</span><br><span class="line">    user: &apos;root&apos;,</span><br><span class="line">    database:&apos;stu_manage_system&apos;,</span><br><span class="line">    port: 3306,</span><br><span class="line">&#125;);</span><br><span class="line">conn.connect();//连接数据库 </span><br><span class="line"></span><br><span class="line">//登录</span><br><span class="line">app.get(&quot;/login&quot;,function (req,res) &#123;</span><br><span class="line">res.render(&apos;login&apos;,&#123;</span><br><span class="line">title:&quot;欢迎登录学生管理系统&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//添加学生页面</span><br><span class="line">app.get(&quot;/insert&quot;,function (req,res) &#123;</span><br><span class="line">res.render(&apos;insert&apos;,&#123;</span><br><span class="line">title:&quot;添加学生页面&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//删除学生页面 delete</span><br><span class="line">app.get(&quot;/delete&quot;,function (req,res) &#123;</span><br><span class="line">var pat = &apos;delete&apos;</span><br><span class="line">var title = &quot;删除学生页面&quot;</span><br><span class="line">search(pat,res,title)//调用数据库查询方法</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">//查询学生页面 search</span><br><span class="line">app.get(&quot;/search&quot;,function (req,res) &#123;</span><br><span class="line">var title = &quot;查询学生页面&quot;</span><br><span class="line">var pat = &quot;search&quot;</span><br><span class="line">search(pat,res,title)//调用数据库查询方法</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//修改学生信息页面 update</span><br><span class="line">app.get(&quot;/update&quot;,function (req,res) &#123;</span><br><span class="line">var title = &quot;修改学生信息页面&quot;</span><br><span class="line">var pat = &quot;update&quot;</span><br><span class="line">search(pat,res,title)//调用数据库查询方法</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//注册 registe</span><br><span class="line">app.post(&quot;/admin/registe&quot;,function (req,res) &#123;</span><br><span class="line">var username = req.body.username;</span><br><span class="line">var password = req.body.password;</span><br><span class="line">console.log(&quot;username:&quot;+username+&quot;password:&quot;+password)</span><br><span class="line"></span><br><span class="line">var insertSQL = &apos;insert into admin values(0,?,?)&apos;;</span><br><span class="line">var insertSQL_params = [username, password];</span><br><span class="line">var selectSQL = &apos;select * from admin &apos;;</span><br><span class="line">conn.query(selectSQL, function (err2, rows) &#123;</span><br><span class="line">//var arrusername = new Array();</span><br><span class="line">        if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        console.log(rows.length)</span><br><span class="line">        if(rows.length == 0)&#123;</span><br><span class="line">        conn.query(insertSQL,insertSQL_params, function (err2, rows) &#123;</span><br><span class="line">        if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        console.log(&quot;成功录入数据&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">&#125;)</span><br><span class="line">res.send(&#123;name:1&#125;)</span><br><span class="line">return true</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        for (var i = 0;i &lt; rows.length;i++) &#123;</span><br><span class="line">            if(username == rows[i].username )&#123;</span><br><span class="line">            res.send(&#123;name:0&#125;)</span><br><span class="line">        return false</span><br><span class="line">        //res.send(&quot;dd&quot;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        if(i &gt;= rows.length-1)&#123;</span><br><span class="line">            conn.query(insertSQL,insertSQL_params, function (err2, rows) &#123;</span><br><span class="line">        if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        console.log(&quot;成功录入数据&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)</span><br><span class="line">    res.send(&#123;name:1&#125;)</span><br><span class="line">    return true           </span><br><span class="line">        &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">&#125;       </span><br><span class="line">        &#125;</span><br><span class="line">&#125;   </span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;)</span><br><span class="line">//登录 login</span><br><span class="line">app.post(&quot;/admin/login&quot;,function (req,res) &#123;</span><br><span class="line">var username = req.body.username;</span><br><span class="line">var password = req.body.password;</span><br><span class="line">var selectSQL = &apos;select * from admin &apos;;</span><br><span class="line">conn.query(selectSQL, function (err2, rows) &#123;</span><br><span class="line">        if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        for (var i = 0;i&lt; rows.length;i++) &#123;</span><br><span class="line">            if(rows[i].username == username &amp;&amp; rows[i].password == password)&#123;     </span><br><span class="line">            res.send(&#123;msg:1&#125;)  </span><br><span class="line">            return true          </span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        if (i &gt;= rows.length-1) &#123;</span><br><span class="line">        res.send(&#123;msg:0&#125;)</span><br><span class="line">        return false</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">&#125;</span><br><span class="line">&#125;   </span><br><span class="line">    &#125;)     </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//数据库查询方法</span><br><span class="line">function search(pat,res,title)&#123;</span><br><span class="line">var selectSQL = &apos;select id,name,number,sex,age,img from student &apos;;</span><br><span class="line">conn.query(selectSQL, function (err2, rows) &#123;</span><br><span class="line">        if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        var arr  = new Array()</span><br><span class="line">        for(var item in rows)&#123;        </span><br><span class="line">        arr.push(rows[item])</span><br><span class="line">        &#125;                  </span><br><span class="line">res.render(pat,&#123;</span><br><span class="line">title:title,</span><br><span class="line">values:arr</span><br><span class="line">&#125;)</span><br><span class="line">&#125;   </span><br><span class="line">    &#125;)     </span><br><span class="line">&#125;</span><br><span class="line">//添加学生页面 insert</span><br><span class="line">app.post(&quot;/login&quot;,function(req,res)&#123;</span><br><span class="line">var insertSQL = &apos;insert into student values(0,?,?,?,?,?)&apos;;</span><br><span class="line">var insertSQL_params = [];</span><br><span class="line">var form = new multiparty.Form();//实例一个multiparty</span><br><span class="line">    form.uploadDir = __dirname+&quot;/bower_components/uploads/&quot;;//设置文件储存路径</span><br><span class="line">    //开始解析前台传过来的文件</span><br><span class="line">  form.parse(req, function(err, fields, files) &#123;</span><br><span class="line">  for (var item in fields)&#123;</span><br><span class="line">  insertSQL_params.push(fields[item][0])</span><br><span class="line">  console.log(fields[item][0])</span><br><span class="line">  &#125;</span><br><span class="line">  var filesTmp = JSON.stringify(files);</span><br><span class="line">      var pr = JSON.parse(filesTmp)</span><br><span class="line">  console.log(pr.upfiles.length)</span><br><span class="line">      if(err)&#123;</span><br><span class="line">        console.log(&apos;parse error: &apos; + err);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">      for (var i = 0 ; i &lt; pr.upfiles.length ; i++) &#123;</span><br><span class="line">        var inputFile = files.upfiles[i];//获取第一个文件</span><br><span class="line">        var finalname = inputFile.originalFilename;</span><br><span class="line">        insertSQL_params.push(finalname)</span><br><span class="line">        var new_name =__dirname+&quot;/bower_components/uploads/&quot;+finalname;//获取文件名</span><br><span class="line">        console.log(new_name)</span><br><span class="line">        var old_name = inputFile.path;//获取文件路径</span><br><span class="line">        console.log(old_name)</span><br><span class="line">fs.renameSync(old_name,new_name);            </span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     //添加数据到数据库</span><br><span class="line">     conn.query(insertSQL,insertSQL_params, function (err2, rows) &#123;</span><br><span class="line">if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        console.log(&quot;成功&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">      res.render(&apos;insert&apos;,&#123;</span><br><span class="line">title:&quot;添加学生页面&quot;</span><br><span class="line">&#125;)   </span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(&quot;/delete&quot;,function(req,res)&#123;</span><br><span class="line">var getid = req.body.id;</span><br><span class="line">var selectSQL = &apos;select id from student &apos;;</span><br><span class="line">conn.query(selectSQL, function (err2, rows) &#123;</span><br><span class="line">        if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        for (var item in rows) &#123;        </span><br><span class="line">        if (getid == rows[item].id) &#123;</span><br><span class="line">        var deleteSQL = &apos;delete from student where id = &apos;+getid+&quot;&quot;;</span><br><span class="line">        conn.query(deleteSQL, function (err2, rows) &#123;</span><br><span class="line">        if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        console.log(&quot;dyuityfdgdd&quot;)  </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;)    </span><br><span class="line">    res.send(&quot;ddd&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&apos;/update&apos;,function(req,res)&#123;</span><br><span class="line">var form = new multiparty.Form();//实例一个multiparty</span><br><span class="line">    form.uploadDir = __dirname+&quot;/bower_components/uploads/&quot;;//设置文件储存路径</span><br><span class="line">    //开始解析前台传过来的文件</span><br><span class="line">  form.parse(req, function(err, fields, files) &#123;</span><br><span class="line">  console.log(fields)</span><br><span class="line">  var filesTmp = JSON.stringify(files);</span><br><span class="line">      var pr = JSON.parse(filesTmp)             </span><br><span class="line">      if(err)&#123;</span><br><span class="line">        console.log(&apos;parse error: &apos; + err);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">      for (var i = 0 ; i &lt; pr.upfiles.length ; i++) &#123;</span><br><span class="line">      console.log(files.upfiles[i])</span><br><span class="line">        var inputFile = files.upfiles[i];//获取第一个文件</span><br><span class="line">        var finalname = inputFile.originalFilename;//文件名  </span><br><span class="line">        if(finalname == &apos;&apos;)&#123;</span><br><span class="line">        var updataSQL01 = &apos;update student set name = ?,number = ?,sex = ?,age = ? where id = ?&apos;;</span><br><span class="line">        var updataSQL_params01 = []</span><br><span class="line">        for(var item in fields)&#123;</span><br><span class="line">        console.log(fields[item][0])</span><br><span class="line">        updataSQL_params01.push(fields[item][0])</span><br><span class="line">        &#125;</span><br><span class="line">        conn.query(updataSQL01,updataSQL_params01, function (err2, rows) &#123;</span><br><span class="line">if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        console.log(&quot;成功&quot;)</span><br><span class="line">        return res.redirect(&quot;/update&quot;) ;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        var updataSQL02 = &apos;update student set name = ?,number = ?,sex = ?,age = ?,img = ? where id = ?&apos;;</span><br><span class="line">        var updataSQL_params02 = []</span><br><span class="line">        for(var item in fields)&#123;</span><br><span class="line">        updataSQL_params02.push(fields[item][0])</span><br><span class="line">        &#125;</span><br><span class="line">        updataSQL_params02.splice(4,0,finalname)</span><br><span class="line">        var new_name =__dirname+&quot;/bower_components/uploads/&quot;+finalname;//获取文件路径</span><br><span class="line">        var old_name = inputFile.path;//获取文件路径</span><br><span class="line">fs.renameSync(old_name,new_name);//改名 </span><br><span class="line">conn.query(updataSQL02,updataSQL_params02, function (err2, rows) &#123;</span><br><span class="line">if (err2)&#123;</span><br><span class="line">            console.log(err2);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        console.log(&quot;成功&quot;)</span><br><span class="line">        return res.redirect(&quot;/update&quot;) ;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)         </span><br><span class="line">        &#125;   </span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>下面是js</p><p>registe.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">//registe.js</span><br><span class="line">$(function()&#123;</span><br><span class="line">$(&quot;.loginsubmit&quot;).click(function()&#123;</span><br><span class="line">var usernameval = $(&quot;.username&quot;).val()</span><br><span class="line">var passwordval = $(&quot;.password&quot;).val()</span><br><span class="line">if(usernameval == &quot;&quot; || passwordval == &quot;&quot;)&#123;</span><br><span class="line">alert(&quot;用户名或密码不能为空&quot;)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">       url: &quot;/admin/login&quot;,</span><br><span class="line">       timeout:3000,</span><br><span class="line">        data: &#123;username:usernameval, password:passwordval&#125;,</span><br><span class="line">        success: function(date)&#123;</span><br><span class="line">        if (date.msg == 1) &#123;</span><br><span class="line">            alert(&quot;登录成功,点击确定跳转&quot;);</span><br><span class="line">           window.location.href = &quot;/insert&quot;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        alert(&quot;登录失败,用户名或密码错误&quot;)        </span><br><span class="line">        &#125;                       </span><br><span class="line">        &#125;,</span><br><span class="line">        error:function(date)&#123;</span><br><span class="line">        alert(&quot;提交失败&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&apos;#click&apos;).click(function()&#123;</span><br><span class="line">$(&quot;#content&quot;).empty();</span><br><span class="line">$(&quot;h1&quot;).text(&quot;欢迎注册学生管理系统管理员&quot;);</span><br><span class="line">$(&quot;#content&quot;).append(</span><br><span class="line">&quot;&lt;form class = &apos;loginForm&apos; &gt;&quot;+</span><br><span class="line">&quot;&lt;input class = &apos;username&apos; type = &apos;text&apos; placeholder = &apos;用户名&apos; &gt;&quot;+</span><br><span class="line">&quot;&lt;input class = &apos;password&apos; type = &apos;password&apos; placeholder = &apos;密码&apos;&gt;&quot;+</span><br><span class="line">&quot;&lt;input class = &apos;registesubmit submit&apos;  type = &apos;button&apos; value = &apos;注册&apos;&gt;&quot;+</span><br><span class="line">&quot;&lt;h6 style = &apos;text-align:center&apos;&gt;有账号去&quot;+</span><br><span class="line">&quot;&lt;a id = &apos;click&apos; href = &apos;/login&apos;&gt; 登录&lt;/a&gt;&quot;+</span><br><span class="line">&quot;&lt;/h6&gt;&quot;+</span><br><span class="line">&quot;&lt;/form&gt;&quot;);</span><br><span class="line">$(&quot;.registesubmit&quot;).click(function()&#123;</span><br><span class="line">var usernameval = $(&quot;.username&quot;).val()</span><br><span class="line">var passwordval = $(&quot;.password&quot;).val()</span><br><span class="line">if(usernameval == &quot;&quot; || passwordval == &quot;&quot;)&#123;</span><br><span class="line">alert(&quot;用户名或密码不能为空&quot;)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        timeout:3000,</span><br><span class="line">       url: &quot;/admin/registe&quot;,</span><br><span class="line">        data: &#123;username:usernameval, password:passwordval&#125;,</span><br><span class="line">        success: function(dat)&#123;</span><br><span class="line">        if (dat.name == 1 ) &#123;</span><br><span class="line">           alert(&quot;注册成功,点击确定返回登录页&quot;+dat.name);</span><br><span class="line">           window.location.href = &quot;/login&quot;           </span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        alert(&quot;注册失败，该用户已存在&quot;)</span><br><span class="line">        &#125;                       </span><br><span class="line">        &#125;,</span><br><span class="line">        error:function(dat)&#123;</span><br><span class="line">        alert(&quot;提交失败&quot;+dat.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>delete.js  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//delete.js</span><br><span class="line">function del(obj)&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:&quot;/delete&quot;,</span><br><span class="line">type:&quot;post&quot;,</span><br><span class="line">data:&#123;id:obj.id&#125;,</span><br><span class="line">success:function(dat)&#123;</span><br><span class="line">window.location.href = &quot;/delete&quot;</span><br><span class="line">&#125;,</span><br><span class="line">error:function(dat)&#123;</span><br><span class="line">alert(&quot;失败&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update.js  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">function remove_DOM(obj)&#123;</span><br><span class="line">var objid = obj.id//获取id</span><br><span class="line">var img = $(&apos;#img&apos;+objid).attr(&quot;src&quot;)</span><br><span class="line">var name = $(&apos;#name&apos;+objid).text()</span><br><span class="line">var number = $(&apos;#number&apos;+objid).text()</span><br><span class="line">var sex = $(&apos;#sex&apos;+objid).text()</span><br><span class="line">var age = $(&apos;#age&apos;+objid).text()</span><br><span class="line">$(&apos;.con&apos;).empty()</span><br><span class="line">$(&apos;.con&apos;).append(</span><br><span class="line">&apos;&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; action=&quot;/update&quot; class=&quot;loginForm&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;div class=&quot;upload&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;span&gt;姓名:&lt;input type=&quot;text&quot; name = &quot;name&quot; placeholder=&quot;姓名&quot; class=&quot;stuMsg stu_name&quot;&gt;&lt;/span&gt;&apos;+</span><br><span class="line">&apos;&lt;/div&gt;&apos;+</span><br><span class="line"></span><br><span class="line">&apos;&lt;div class=&quot;upload&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;span&gt;学号:&lt;input type=&quot;text&quot; name = &quot;number&quot; placeholder=&quot;学号&quot; class=&quot;stuMsg stu_number&quot;&gt;&lt;/span&gt;&apos;+</span><br><span class="line">&apos;&lt;/div&gt;&apos;+</span><br><span class="line"></span><br><span class="line">&apos;&lt;div class=&quot;upload&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;span&gt;性别:&lt;input type=&quot;text&quot; name = &quot;sex&quot; placeholder=&quot;性别&quot; class=&quot;stuMsg stu_sex&quot;&gt;&lt;/span&gt;&apos;+</span><br><span class="line">&apos;&lt;/div&gt;&apos;+</span><br><span class="line"></span><br><span class="line">&apos;&lt;div class=&quot;upload&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;span&gt;年龄:&lt;input type=&quot;text&quot; name = &quot;age&quot; placeholder=&quot;年龄&quot; class=&quot;stuMsg stu_age&quot;&gt;&lt;/span&gt;&apos;+</span><br><span class="line">&apos;&lt;/div&gt;&apos;+</span><br><span class="line"></span><br><span class="line">&apos;&lt;div id=&quot;containimg&quot; class=&quot;upload&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;span&gt;头像:&lt;input type=&quot;file&quot; name=&quot;upfiles&quot; multiple=&quot;mutiple&quot; class=&quot;stuMsg stu_img&quot;&gt;&lt;/span&gt;&apos;+</span><br><span class="line">&apos;&lt;/div&gt;&apos;+</span><br><span class="line"></span><br><span class="line">&apos;&lt;input type=&quot;text&quot; name=&quot;hiddenid&quot;  class=&quot;stuMsg hiddenid&quot;&gt;&apos;+</span><br><span class="line"></span><br><span class="line">&apos;&lt;div class=&quot;upload&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;input type=&quot;submit&quot; value=&quot;录入&quot; class=&quot;stuMsg addmsg&quot;&gt;&apos;+</span><br><span class="line">&apos;&lt;/div&gt;&apos;+</span><br><span class="line">&apos;&lt;/form&gt;&apos;</span><br><span class="line">)</span><br><span class="line">$(&apos;.stu_name&apos;).val(name)</span><br><span class="line">$(&apos;.stu_number&apos;).val(number)</span><br><span class="line">$(&apos;.stu_sex&apos;).val(sex)</span><br><span class="line">$(&apos;.stu_age&apos;).val(age)</span><br><span class="line">$(&apos;.hiddenid&apos;).val(objid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装并起一个服务：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一：nodeJS下载安装。

    1.nodeJS下载安装不再赘述，官网：https://nodejs.org
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.npm安装模块语法：npm install _xxx_&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;二：创建一个服务器，开启第一个应用。

    用nodeJS的express框架创建一个服务器：

    (以express框架为例子创建应用)express框架封装了http模块相比更加简洁,

    首先要安装express模块 npm install express
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// app.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var express = require(&amp;quot;express&amp;quot;);//引入express模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var app = express();//将express()对象赋给app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var port = 3000;//设置端口号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.get(&amp;quot;/ &amp;quot;,function (req,res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.send(&amp;quot;hello world&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.listen(port);//监听端口&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术栈" scheme="https://www.wxqdoit.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
</feed>
